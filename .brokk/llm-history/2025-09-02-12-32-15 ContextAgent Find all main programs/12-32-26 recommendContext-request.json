{
  "messages" : [ {
    "text" : "You are an assistant that identifies relevant code context based on a goal and the existing relevant information.\nYou are given a goal, the current workspace contents (if any), and a list of class summaries (within <available_summaries> tags).\nAnalyze the provided information and determine which items are most relevant to achieving the goal.\n"
  }, {
    "name" : null,
    "contents" : [ {
      "text" : "<available_summaries>\n<class fqcn='react-native.src.storage.saveDeepSeekApiKey' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveDeepSeekApiKey(apiKey: string) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.styles' file='react-native/src/chat/component/CustomScrollToBottomComponent.tsx'>\nconst styles = StyleSheet.create({\n  container: {\n    height: 90\n  },\n  promptContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1\n  }\n})\n</class>\n\n<class fqcn='react-native.src.settings.SettingsScreen' file='react-native/src/settings/SettingsScreen.tsx'>\nfunction SettingsScreen(): React.JSX.Element { ... }\n</class>\n\n<class fqcn='react-native.src.storage.updateChatTitlesFromUserMessages' file='react-native/src/storage/StorageUtils.ts'>\nexport function updateChatTitlesFromUserMessages() { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.tokenInfoKey' file='react-native/src/storage/StorageUtils.ts'>\nconst tokenInfoKey = keyPrefix + 'tokenInfo'\n</class>\n\n<class fqcn='react-native.src.api.requestUpgradeInfo' file='react-native/src/api/bedrock-api.ts'>\nexport const requestUpgradeInfo = async (\n  os: string,\n  version: string\n): Promise<UpgradeInfo> => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveRegion' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveRegion(region: string) { ... }\n</class>\n\n<class fqcn='react-native.src.settings.addBedrockPrefixToDeepseekModels' file='react-native/src/settings/ModelPrice.ts'>\nexport function addBedrockPrefixToDeepseekModels(models: Model[]): void { ... }\n</class>\n\n<class fqcn='react-native.src.api.extractChunkContent' file='react-native/src/api/bedrock-api.ts'>\nfunction extractChunkContent(bedrockChunk: BedrockChunk, rawChunk: string) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getMessagesBySessionId' file='react-native/src/storage/StorageUtils.ts'>\nexport function getMessagesBySessionId(sessionId: number): SwiftChatMessage[] { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getOllamaApiUrl' file='react-native/src/storage/StorageUtils.ts'>\nexport function getOllamaApiUrl(): string { ... }\n</class>\n\n<class fqcn='react-native.src.chat.ChatScreen' file='react-native/src/chat/ChatScreen.tsx'>\nfunction ChatScreen(): React.JSX.Element { ... }\n</class>\n\n<class fqcn='react-native.src.chat._module_.textPlaceholder' file='react-native/src/chat/ChatScreen.tsx'>\nconst textPlaceholder = '...'\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown._module_.CustomCodeHighlighter' file='react-native/src/chat/component/markdown/CustomMarkdownRenderer.tsx'>\nconst CustomCodeHighlighter = lazy(() => import('./CustomCodeHighlighter'))\n</class>\n\n<class fqcn='react-native.src.storage._module_.apiKeyTag' file='react-native/src/storage/StorageUtils.ts'>\nconst apiKeyTag = keyPrefix + 'apiKeyTag'\n</class>\n\n<class fqcn='react-native.src.storage.updateMessageList' file='react-native/src/storage/StorageUtils.ts'>\nexport function updateMessageList(chatList: Chat[]) { ... }\n</class>\n\n<class fqcn='react-native.src.settings.getImagePrice' file='react-native/src/settings/ModelPrice.ts'>\nfunction getImagePrice(\n  modelName: keyof ImageModelPrices,\n  size: 'small' | 'medium' | 'large'\n): number { ... }\n</class>\n\n<class fqcn='react-native.src.settings.CustomDropdown' file='react-native/src/settings/DropdownComponent.tsx'>\nconst CustomDropdown: React.FC<CustomDropdownProps> = ({\n  label,\n  data,\n  value,\n  onChange,\n  placeholder,\n  searchPlaceholder = 'Search...'\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.DefaultImageModel' file='react-native/src/storage/Constants.ts'>\nconst DefaultImageModel = {\n  modelName: 'Stable Diffusion 3.5 Large',\n  modelId: 'stability.sd3-5-large-v1:0',\n  modelTag: ModelTag.Bedrock\n}\n</class>\n\n<class fqcn='react-native.src._module_.isMac' file='react-native/src/App.tsx'>\nexport const isMac = isMacCatalyst\n</class>\n\n<class fqcn='react-native.src.settings.createStyles' file='react-native/src/settings/SettingsScreen.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.api.requestAllModels' file='react-native/src/api/bedrock-api.ts'>\nexport const requestAllModels = async (): Promise<AllModel> => { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.thinkingEnabledKey' file='react-native/src/storage/StorageUtils.ts'>\nconst thinkingEnabledKey = keyPrefix + 'thinkingEnabledKey'\n</class>\n\n<class fqcn='react-native.src.chat.component.ModelIconButtonProps' file='react-native/src/chat/component/ModelIconButton.tsx'>\ninterface ModelIconButtonProps {\n  onPress: () => void\n}\n</class>\n\n<class fqcn='react-native.src.storage.saveImageModel' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveImageModel(model: Model) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveApiKey' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveApiKey(apiKey: string) { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.sessionIdPrefix' file='react-native/src/storage/StorageUtils.ts'>\nconst sessionIdPrefix = keyPrefix + 'sessionId/'\n</class>\n\n<class fqcn='react-native.src.history.groupMessagesByDate' file='react-native/src/history/HistoryGroupUtil.ts'>\nexport function groupMessagesByDate(messages: Chat[]) { ... }\n</class>\n\n<class fqcn='react-native.src.utils._module_.isAndroid' file='react-native/src/utils/PlatformUtils.ts'>\nexport const isAndroid = Platform.OS === 'android'\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.styles' file='react-native/src/chat/component/CustomScrollToBottomComponent.tsx'>\nconst styles = StyleSheet.create({\n  scrollToBottomContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  scrollToBottomIcon: {\n    width: 20,\n    height: 20\n  }\n})\n</class>\n\n<class fqcn='react-native.src.storage._module_.messageListKey' file='react-native/src/storage/StorageUtils.ts'>\nconst messageListKey = keyPrefix + 'messageList'\n</class>\n\n<class fqcn='react-native.src.api.isEnableThinking' file='react-native/src/api/bedrock-api.ts'>\nconst isEnableThinking = (): boolean => { ... }\n</class>\n\n<class fqcn='react-native.src.api.genImage' file='react-native/src/api/bedrock-api.ts'>\nexport const genImage = async (\n  imagePrompt: string,\n  controller: AbortController,\n  image?: ImageInfo\n): Promise<ImageRes> => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getApiUrl' file='react-native/src/storage/StorageUtils.ts'>\nexport function getApiUrl(): string { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.HeaderTitleProps' file='react-native/src/chat/component/HeaderTitle.tsx'>\ninterface HeaderTitleProps {\n  title: string\n  usage?: Usage\n  onDoubleTap: () => void\n  onShowSystemPrompt: () => void\n  isShowSystemPrompt: boolean\n}\n</class>\n\n<class fqcn='react-native.src.storage._module_.openAICompatModelsKey' file='react-native/src/storage/StorageUtils.ts'>\nconst openAICompatModelsKey = keyPrefix + 'openAICompatModelsKey'\n</class>\n\n<class fqcn='react-native.src.storage._module_.systemPromptsKey' file='react-native/src/storage/StorageUtils.ts'>\nconst systemPromptsKey = keyPrefix + 'systemPromptsKey'\n</class>\n\n<class fqcn='react-native.src.storage.saveOllamaApiURL' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveOllamaApiURL(apiUrl: string) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getCurrentVoiceSystemPrompt' file='react-native/src/storage/StorageUtils.ts'>\nexport function getCurrentVoiceSystemPrompt(): SystemPrompt | null { ... }\n</class>\n\n<class fqcn='react-native.src.api.getApiKey' file='react-native/src/api/open-api.ts'>\nfunction getApiKey(): string { ... }\n</class>\n\n<class fqcn='react-native.src.types._module_.Usage' file='react-native/src/types/Chat.ts'>\nexport type Usage = {\n  modelName: string;\n  inputTokens: number;\n  outputTokens: number;\n  totalTokens: number;\n  imageCount?: number;\n  smallImageCount?: number;\n  largeImageCount?: number;\n};\n</class>\n\n<class fqcn='react-native.src.api.invokeBedrockWithCallBack' file='react-native/src/api/bedrock-api.ts'>\nexport const invokeBedrockWithCallBack = async (\n  messages: BedrockMessage[],\n  chatMode: ChatMode,\n  prompt: SystemPrompt | null,\n  shouldStop: () => boolean,\n  controller: AbortController,\n  callback: CallbackFunction\n) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.useMarkdownHookOptions' file='react-native/src/chat/component/markdown/useMarkdown.ts'>\nexport interface useMarkdownHookOptions {\n  colorScheme?: ColorSchemeName\n  renderer?: RendererInterface\n  theme?: UserTheme\n  styles?: MarkedStyles\n  baseUrl?: string\n  tokenizer?: Tokenizer<CustomToken>\n  chatStatus?: ChatStatus\n}\n</class>\n\n<class fqcn='react-native.src.storage.getMessageList' file='react-native/src/storage/StorageUtils.ts'>\nexport function getMessageList(): Chat[] { ... }\n</class>\n\n<class fqcn='react-native.src.api.requestAllOllamaModels' file='react-native/src/api/ollama-api.ts'>\nexport const requestAllOllamaModels = async (): Promise<Model[]> => { ... }\n</class>\n\n<class fqcn='react-native.src.settings.getUsagePrice' file='react-native/src/settings/ModelPrice.ts'>\nexport const getUsagePrice = (usage: Usage): UsagePrice => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown._module_.MemoizedCodeHighlighter' file='react-native/src/chat/component/markdown/CustomMarkdownRenderer.tsx'>\nconst MemoizedCodeHighlighter = React.memo(\n  ({\n    text,\n    language,\n    colors,\n    isDark\n  }: {\n    text: string;\n    language?: string;\n    colors: ColorScheme;\n    isDark: boolean;\n  }) => {\n    const styles = createCustomStyles(colors);\n    const handleCopy = useCallback(() => {\n      Clipboard.setString(text);\n    }, [text]);\n\n    const hljsStyle = isDark ? vs2015 : github;\n\n    return (\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <Text style={styles.headerText}>\n            {language === '' ? 'code' : language}\n          </Text>\n          <CopyButton onCopy={handleCopy} colors={colors} isDark={isDark} />\n        </View>\n        <Suspense fallback={<Text style={styles.loading}>Loading...</Text>}>\n          <CustomCodeHighlighter\n            hljsStyle={hljsStyle}\n            scrollViewProps={{\n              contentContainerStyle: {\n                padding: 12,\n                minWidth: '100%',\n                borderBottomLeftRadius: 8,\n                borderBottomRightRadius: 8,\n                backgroundColor: colors.codeBackground\n              },\n              // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              // @ts-expect-error\n              backgroundColor: colors.codeBackground\n            }}\n            textStyle={styles.text}\n            language={language ?? 'code'}>\n            {text}\n          </CustomCodeHighlighter>\n        </Suspense>\n      </View>\n    );\n  },\n  (prevProps, nextProps) =>\n    prevProps.text === nextProps.text &&\n    prevProps.language === nextProps.language &&\n    prevProps.colors === nextProps.colors &&\n    prevProps.isDark === nextProps.isDark\n)\n</class>\n\n<class fqcn='react-native.src.AppNavigator' file='react-native/src/App.tsx'>\nconst AppNavigator = () => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.CustomHeaderRightButton' file='react-native/src/chat/component/CustomHeaderRightButton.tsx'>\nexport const CustomHeaderRightButton: React.FC<HeaderRightButtonProps> =\n  React.memo(({ onPress, imageSource }) => (\n    <TouchableOpacity onPress={onPress} style={styles.touchStyle}>\n      <Image source={imageSource} style={styles.editImage} />\n    </TouchableOpacity>\n  ))\n</class>\n\n<class fqcn='react-native.src.storage.saveVoiceId' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveVoiceId(voiceId: string) { ... }\n</class>\n\n<class fqcn='react-native.src.types._module_.UsagePrice' file='react-native/src/types/Chat.ts'>\nexport type UsagePrice = {\n  modelName: string;\n  inputPrice: number;\n  outputPrice: number;\n  totalPrice: number;\n  smallImagePrice: number;\n  mediumImagePrice: number;\n  largeImagePrice: number;\n};\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.AnimatedCircle' file='react-native/src/chat/component/ImageProgressBar.tsx'>\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle)\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown._module_.HighlighterStyleSheet' file='react-native/src/chat/component/markdown/CustomCodeHighlighter.tsx'>\ntype HighlighterStyleSheet = { [key: string]: TextStyle }\n</class>\n\n<class fqcn='react-native.src.api.requestToken' file='react-native/src/api/bedrock-api.ts'>\nexport const requestToken = async (): Promise<TokenResponse | null> => { ... }\n</class>\n\n<class fqcn='react-native.src.settings.getTotalInputPrice' file='react-native/src/settings/ModelPrice.ts'>\nexport function getTotalInputPrice(usage: Usage[]) { ... }\n</class>\n\n<class fqcn='react-native.src.utils.getModelTag' file='react-native/src/utils/ModelUtils.ts'>\nexport function getModelTag(model: Model): string { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.ListIcon' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nconst ListIcon = ({ textColor }: { textColor: string }) => { ... }\n</class>\n\n<class fqcn='react-native.src.types._module_.TokenResponse' file='react-native/src/types/Chat.ts'>\nexport type TokenResponse = {\n  accessKeyId: string;\n  secretAccessKey: string;\n  sessionToken: string;\n  expiration: string;\n  error: string;\n};\n</class>\n\n<class fqcn='react-native.src.history.useAppContext' file='react-native/src/history/AppProvider.tsx'>\nexport const useAppContext = () => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getOpenAICompatApiKey' file='react-native/src/storage/StorageUtils.ts'>\nexport function getOpenAICompatApiKey(): string { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveModelOrder' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveModelOrder(models: Model[]) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.styles' file='react-native/src/chat/component/CustomScrollToBottomComponent.tsx'>\nconst styles = StyleSheet.create({\n  container: {\n    width: 52,\n    height: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingRight: 5\n  },\n  icon: {\n    width: 28,\n    height: 28,\n    borderRadius: 14,\n    marginBottom: -6\n  }\n})\n</class>\n\n<class fqcn='react-native.src.prompt._module_.styles' file='react-native/src/prompt/HeaderLeftView.tsx'>\nconst styles = StyleSheet.create({\n  headerContainer: {\n    marginLeft: -10,\n    paddingRight: 16,\n    padding: 10\n  },\n  headerImage: { width: 20, height: 20 }\n})\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.getRNStylesFromHljsStyle' file='react-native/src/chat/component/markdown/CustomCodeHighlighter.tsx'>\nconst getRNStylesFromHljsStyle = (\n  hljsStyle: ReactStyle\n): HighlighterStyleSheet => { ... }\n</class>\n\n<class fqcn='react-native.src.settings._module_.GITHUB_LINK' file='react-native/src/settings/SettingsScreen.tsx'>\nexport const GITHUB_LINK = 'https://github.com/aws-samples/swift-chat'\n</class>\n\n<class fqcn='react-native.src.storage._module_.VoiceIDList' file='react-native/src/storage/Constants.ts'>\nexport const VoiceIDList = [\n  {\n    voiceName: 'Matthew (American English)',\n    voiceId: 'matthew'\n  },\n  {\n    voiceName: 'Tiffany (American English)',\n    voiceId: 'tiffany'\n  },\n  {\n    voiceName: 'Amy (British English)',\n    voiceId: 'amy'\n  },\n  {\n    voiceName: 'Lupe (Spanish)',\n    voiceId: 'lupe'\n  },\n  {\n    voiceName: 'Carlos (Spanish)',\n    voiceId: 'carlos'\n  },\n]\n</class>\n\n<class fqcn='react-native.src.chat.util._module_.OpenAIMessage' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nexport type OpenAIMessage = {\n  role: string;\n  content:\n    | string\n    | Array<{\n        type: 'text' | 'image_url';\n        text?: string;\n        image_url?: {\n          url: string;\n        };\n      }>;\n};\n</class>\n\n<class fqcn='react-native.src.storage.updateTextModelUsageOrder' file='react-native/src/storage/StorageUtils.ts'>\nexport function updateTextModelUsageOrder(model: Model) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getAllRegions' file='react-native/src/storage/Constants.ts'>\nexport function getAllRegions() { ... }\n</class>\n\n<class fqcn='react-native.src.chat.util._module_.MessageContent' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nexport type MessageContent = | TextContent\n  | ImageContent\n  | VideoContent\n  | DocumentContent;\n</class>\n\n<class fqcn='react-native.src.prompt.PresetPrompt' file='react-native/src/prompt/PresetPrompts.ts'>\nexport interface PresetPrompt extends SystemPrompt {\n  avatar: string\n  description: string\n  category?: string\n}\n</class>\n\n<class fqcn='react-native.src.settings.createStyles' file='react-native/src/settings/SettingsScreen.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.prompt._module_.MAX_NAME_LENGTH' file='react-native/src/prompt/PromptScreen.tsx'>\nconst MAX_NAME_LENGTH = 20\n</class>\n\n<class fqcn='react-native.src.chat.util.getFullFileUrl' file='react-native/src/chat/util/FileUtils.ts'>\nexport const getFullFileUrl = (url: string) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.ImageProgressBar' file='react-native/src/chat/component/ImageProgressBar.tsx'>\nconst ImageProgressBar = () => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getTextModel' file='react-native/src/storage/StorageUtils.ts'>\nexport function getTextModel(): Model { ... }\n</class>\n\n<class fqcn='react-native.src.types.PressMode' file='react-native/src/types/Chat.ts'>\nexport enum PressMode {\n  Click = 'Click',\n  LongPress = 'LongPress'\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.PromptListProps' file='react-native/src/chat/component/PromptListComponent.tsx'>\ninterface PromptListProps {\n  onSelectPrompt: (prompt: SystemPrompt | null) => void\n  onSwitchedToTextModel: () => void\n}\n</class>\n\n<class fqcn='react-native.src.api.invokeOllamaWithCallBack' file='react-native/src/api/ollama-api.ts'>\nexport const invokeOllamaWithCallBack = async (\n  messages: BedrockMessage[],\n  prompt: SystemPrompt | null,\n  shouldStop: () => boolean,\n  controller: AbortController,\n  callback: CallbackFunction\n) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.currentSystemPromptKey' file='react-native/src/storage/StorageUtils.ts'>\nconst currentSystemPromptKey = keyPrefix + 'currentSystemPromptKey'\n</class>\n\n<class fqcn='react-native.src.settings.getTotalOutputTokens' file='react-native/src/settings/ModelPrice.ts'>\nexport function getTotalOutputTokens(usage: Usage[]) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getDefaultApiKeyModels' file='react-native/src/storage/Constants.ts'>\nexport function getDefaultApiKeyModels() { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.voiceIdKey' file='react-native/src/storage/StorageUtils.ts'>\nconst voiceIdKey = keyPrefix + 'voiceIdKey'\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown._module_.MemoizedText' file='react-native/src/chat/component/markdown/CustomCodeHighlighter.tsx'>\nconst MemoizedText = memo(\n  ({\n    style,\n    children\n  }: {\n    style: StyleProp<TextStyle>;\n    children: ReactNode;\n  }) => <Text style={style}>{children}</Text>\n)\n</class>\n\n<class fqcn='react-native.src.storage.getTokenInfo' file='react-native/src/storage/StorageUtils.ts'>\nexport function getTokenInfo(): TokenResponse | null { ... }\n</class>\n\n<class fqcn='react-native.src.types._module_.UpgradeInfo' file='react-native/src/types/Chat.ts'>\nexport type UpgradeInfo = {\n  needUpgrade: boolean;\n  version: string;\n  url: string;\n};\n</class>\n\n<class fqcn='react-native.src.chat.component.ImageSpinner' file='react-native/src/chat/component/ImageSpinner.tsx'>\nconst ImageSpinner = ({\n  size = 24,\n  source,\n  visible,\n  isRotate = false\n}: ImageSpinnerProps) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getModelUsage' file='react-native/src/storage/StorageUtils.ts'>\nexport function getModelUsage(): Usage[] { ... }\n</class>\n\n<class fqcn='react-native.src.types.SwiftChatMessage' file='react-native/src/types/Chat.ts'>\nexport interface SwiftChatMessage extends IMessage {\n  usage?: Usage\n  reasoning?: string\n  user: SwiftChatUser\n  metrics?: Metrics\n}\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.VIDEO_FORMATS' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nexport const VIDEO_FORMATS = ['mp4', 'mov', 'mkv', 'webm']\n</class>\n\n<class fqcn='react-native.src.chat._module_.ChatScreenRouteProp' file='react-native/src/chat/ChatScreen.tsx'>\ntype ChatScreenRouteProp = RouteProp<DrawerParamList, 'Bedrock'>\n</class>\n\n<class fqcn='react-native.src.chat.component.AudioWaveformRef' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nexport interface AudioWaveformRef {\n  resetAudioLevels: () => void\n}\n</class>\n\n<class fqcn='react-native.src.chat.util.TextContent' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nexport interface TextContent {\n  text: string\n}\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.MODAL_HEIGHT' file='react-native/src/chat/component/ModelSelectionModal.tsx'>\nconst MODAL_HEIGHT = 360\n</class>\n\n<class fqcn='react-native.src.history.createStyles' file='react-native/src/history/CustomDrawerContent.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.settings.TabButtonProps' file='react-native/src/settings/TabButton.tsx'>\ninterface TabButtonProps {\n  label: string\n  isSelected: boolean\n  onPress: () => void\n}\n</class>\n\n<class fqcn='react-native.src.settings._module_.ImageModelPrices' file='react-native/src/settings/ModelPrice.ts'>\ntype ImageModelPrices = {\n  'Titan Image Generator G1': {\n    small: number;\n    medium: number;\n  };\n  'Titan Image Generator G1 v2': {\n    small: number;\n    medium: number;\n  };\n  'Nova Canvas': {\n    medium: number;\n    large: number;\n  };\n  'SDXL 1.0': {\n    medium: number;\n  };\n  'SD3 Large 1.0': {\n    medium: number;\n  };\n  'Stable Diffusion 3.5 Large': {\n    medium: number;\n  };\n  'Stable Image Core 1.0': {\n    medium: number;\n  };\n  'Stable Image Ultra 1.0': {\n    medium: number;\n  };\n};\n</class>\n\n<class fqcn='react-native.src.storage._module_.imageSizeKey' file='react-native/src/storage/StorageUtils.ts'>\nconst imageSizeKey = keyPrefix + 'imageSizeKey'\n</class>\n\n<class fqcn='react-native.src.chat.util.normalizeFilename' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nfunction normalizeFilename(filename: string): string { ... }\n</class>\n\n<class fqcn='react-native.src.prompt.createStyles' file='react-native/src/prompt/PromptScreen.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.settings.getTotalImageCount' file='react-native/src/settings/ModelPrice.ts'>\nexport function getTotalImageCount(usage: Usage[]) { ... }\n</class>\n\n<class fqcn='react-native.src.prompt.PromptScreen' file='react-native/src/prompt/PromptScreen.tsx'>\nfunction PromptScreen(): React.JSX.Element { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.styles' file='react-native/src/chat/component/CustomScrollToBottomComponent.tsx'>\nconst styles = StyleSheet.create({\n  touchStyle: {\n    paddingVertical: 10,\n    paddingHorizontal: 15\n  },\n  editImage: {\n    width: 22,\n    height: 22\n  }\n})\n</class>\n\n<class fqcn='react-native.src._module_.width' file='react-native/src/App.tsx'>\nconst width = minWidth > 434 ? 300 : minWidth * 0.83\n</class>\n\n<class fqcn='react-native.src.storage.saveMessages' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveMessages(\n  sessionId: number,\n  messages: SwiftChatMessage[],\n  usage: Usage\n) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.initializeStorage' file='react-native/src/storage/StorageUtils.ts'>\nconst initializeStorage = () => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.createStyles' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.prompt._module_.PRESET_PROMPTS' file='react-native/src/prompt/PresetPrompts.ts'>\nexport const PRESET_PROMPTS: PresetPrompt[] = [\n  {\n    id: 1,\n    name: 'Broperty Ai',\n    prompt: `Saya adalah **Broperty Ai**, bot utama yang **HANYA merespon komunikasi terkait properti real estate**. Jika pertanyaan tidak sesuai dengan topik properti real estate, saya akan secara halus menolaknya.\n\n**PERAN UTAMA SAYA:**\n1. **GERBANG UTAMA** - Selalu berkomunikasi dengan user dan internal Broperty, serta menghubungkan kedua pihak tersebut\n2. **IDENTIFIKASI KEBUTUHAN USER** - Berusaha untuk selalu mengetahui & memenuhi kebutuhan spesifik user terkait properti\n3. **MENYAMBUNGKAN KE BERBAGAI FITUR YANG ADA** - Menghubungkan user ke sub-bot profesional, web view, atau Google Maps\n\n**FITUR AKTIF YANG TERSEDIA:**\n- **Sub Bot Profesional Ecosystem:**\n  1. 🏠 Agensi Properti Ai - Konsultasi jual beli properti\n  2. 📜 Notaris Ai - Pengurusan sertifikat dan dokumen legal\n  3. ⚖️ Pengacara Ai - Konsultasi hukum properti dan kontrak\n  4. 🏛 Aparatur Pemerintah Ai - Perangkat pemerintah untuk pengurusan properti\n  5. 💻 Sertifikasi Elektronik Ai - Bantuan sertifikat elektronik\n  6. 🏦 KPR Bank Ai - Informasi KPR berbagai bank\n\n- **Web View Integration** - Akses konten properti terkini\n- **Google Maps Integration** - Lokasi dan navigasi properti (Fitur Baru!)\n\nSilakan ajukan pertanyaan terkait properti real estate, saya akan menyambungkan Anda ke fitur yang tepat!`,\n    description: 'Ai Utama sebagai **Gerbang Komunikasi** & **Konektor Fitur Properti**',\n    avatar: '🏠',\n    includeHistory: true,\n    category: 'Utama'\n  },\n  {\n    id: 926,\n    name: 'Agensi Properti Ai',\n    prompt: 'Aku adalah Agensi Properti Ai berpengalaman puluhan tahun dalam membantu pembelian dan penjualan properti klien kami. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan proses jual beli properti',\n    description: 'Konsultasi dalam pembelian atau penjualan properti milik anda',\n    avatar: '👨‍💼',\n    includeHistory: true,\n    category: 'Asisten'\n  },\n  {\n    id: 900,\n    name: 'Notaris Ai',\n    prompt: 'Halo! Aku adalah Notaris Ai. Aku akan memberikan kamu berbagai info terkait apapun itu yang menjadi tugas Notaris. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan tugas kenotariatan',\n    description: 'Membuat dokumen transaksi jual beli properti, legalisasi dopkumen serta membantu pengurusan surat ke BPN',\n    avatar: '📜',\n    includeHistory: true,\n    category: 'Profesional'\n  },\n  {\n    id: 901,\n    name: 'Pengacara Ai',\n    prompt: 'Halo! Aku adalah Pengacara Ai. Aku akan memberikan kamu berbagai info berita terkait tugas Pengacara yang berkaitan dengan properti. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan tugas Pengacara properti',\n    description: 'Menangani sengketa, memeriksa dokumen transaksi jual beli & pendampingan hukum di pengadilan',\n    avatar: '⚖️',\n    includeHistory: true,\n    category: 'Profesional'\n  },\n  {\n    id: 911,\n    name: 'Aparatur Pemerintah Ai',\n    prompt: 'Halo! Aku adalah Aparatur Pemerintah Ai seperti kepala desa, Lurah, Camat, Bupati, Walikota dll yang membantu terkait segala sesuatu yang berhubungan dengan properti. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan tugas Aparatur Pemerintah terkait properti',\n    description: 'Mengurus prosedur kepemilikan properti di pemerintahan',\n    avatar: '🏛',\n    includeHistory: true,\n    category: 'Instansi'\n  },\n  {\n    id: 920,\n    name: 'Sertifikasi Elektronik Ai',\n    prompt: 'Halo! Aku adalah asisten Program Sertifikasi Elektronik Ai yang akan membantu anda dalam pengurusan sertifikat elektronik di BPN. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan Program Sertifikasi Elektronik',\n    description: 'Membantu dalam pembuatan Sertifikasi Elektronik',\n    avatar: '💻',\n    includeHistory: true,\n    category: 'Asisten'\n  },\n   {\n    id: 922,\n    name: 'KPR Bank Ai',\n    prompt: 'Halo! Aku adalah asisten pengajuan KPR Bank Ai yang bertugas memberikan info dan membantu anda terkait segala sesuatu mengenai KPR berbagai Bank di Indonesia. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan KPR Bank',\n    description: 'Memberikan segala info terkait KPR di Indonesia',\n    avatar: '🏦',   \n    includeHistory: true,\n    category: 'Asisten'\n  },\n]\n</class>\n\n<class fqcn='react-native.src.chat.util.VideoContent' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nexport interface VideoContent {\n  video: {\n      format: string;\n      source: {\n        bytes: string;\n      };\n    }\n}\n</class>\n\n<class fqcn='react-native.src.storage._module_.HARDCODED_DEEPSEEK_API_KEY' file='react-native/src/storage/Constants.ts'>\nexport const HARDCODED_DEEPSEEK_API_KEY = 'sk-b9067f0295ac48d5bc7cfd4674fea812'\n</class>\n\n<class fqcn='react-native.src.chat.util.getBedrockMessage' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nexport async function getBedrockMessage(\n  message: SwiftChatMessage\n): Promise<BedrockMessage> { ... }\n</class>\n\n<class fqcn='react-native.src.types.ReasoningContent' file='react-native/src/types/Chat.ts'>\nexport interface ReasoningContent {\n  text: string\n}\n</class>\n\n<class fqcn='react-native.src.theme.ColorScheme' file='react-native/src/theme/colors.ts'>\nexport interface ColorScheme {\n  background: string\n  surface: string\n  surfaceSecondary: string\n  text: string\n  textSecondary: string\n  textTertiary: string\n  border: string\n  borderLight: string\n  shadow: string\n  card: string\n  input: string\n  placeholder: string\n  error: string\n  success: string\n  warning: string\n  info: string\n  primary: string\n  primaryLight: string\n  accent: string\n  overlay: string\n  codeBackground: string\n  selectedBackground: string\n  selectedBackgroundMac: string\n  inputBackground: string\n  labelBackground: string\n  messageBackground: string\n  reasoningBackground: string\n  inputBorder: string\n  drawerBackground: string\n  drawerBackgroundMac: string\n  promptButtonBackground: string\n  promptButtonBorder: string\n  promptText: string\n  promptSelectedBorder: string\n  promptAddButtonBackground: string\n  promptAddButtonBorder: string\n  promptAddText: string\n  promptDeleteBackground: string\n  promptDeleteText: string\n  promptScreenInputBorder: string\n  promptScreenSaveButton: string\n  promptScreenSaveButtonText: string\n  textDarkGray: string\n  inputToolbarBorder: string\n  fileListBackground: string\n  fileItemBorder: string\n  addButtonBackground: string\n  chatScreenSplit: string\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown._module_.ReactStyle' file='react-native/src/chat/component/markdown/CustomCodeHighlighter.tsx'>\ntype ReactStyle = Record<string, CSSProperties>\n</class>\n\n<class fqcn='react-native.src.storage.saveOpenAIProxyEnabled' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveOpenAIProxyEnabled(enabled: boolean) { ... }\n</class>\n\n<class fqcn='react-native.src.prompt.PresetPromptList' file='react-native/src/prompt/PresetPromptList.tsx'>\nconst PresetPromptList: React.FC<PresetPromptListProps> = () => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.HeaderTitle' file='react-native/src/chat/component/HeaderTitle.tsx'>\nconst HeaderTitle: React.FC<HeaderTitleProps> = ({\n  title,\n  usage,\n  onDoubleTap,\n  onShowSystemPrompt,\n  isShowSystemPrompt\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.NavigationProp' file='react-native/src/chat/component/EmptyChatComponent.tsx'>\ntype NavigationProp = DrawerNavigationProp<RouteParamList>\n</class>\n\n<class fqcn='react-native.src.storage.getImageSize' file='react-native/src/storage/StorageUtils.ts'>\nexport function getImageSize() { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.CustomCodeHighlighter' file='react-native/src/chat/component/markdown/CustomCodeHighlighter.tsx'>\nexport const CustomCodeHighlighter: FunctionComponent<CodeHighlighterProps> = ({\n  children,\n  textStyle,\n  hljsStyle,\n  scrollViewProps,\n  containerStyle,\n  ...rest\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.DrawerNavigator' file='react-native/src/App.tsx'>\nconst DrawerNavigator = () => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveMessageList' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveMessageList(\n  sessionId: number,\n  messages: SwiftChatMessage[],\n  chatMode: ChatMode\n) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveTokenInfo' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveTokenInfo(tokenInfo: TokenResponse) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveApiUrl' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveApiUrl(apiUrl: string) { ... }\n</class>\n\n<class fqcn='react-native.src.api._module_.OpenRouterTag' file='react-native/src/api/open-api.ts'>\nconst OpenRouterTag = ': OPENROUTER PROCESSING'\n</class>\n\n<class fqcn='react-native.src.types.EventData' file='react-native/src/types/Chat.ts'>\nexport interface EventData {\n  id?: number\n  prompt?: SystemPrompt\n  sessionId?: number\n  presetPrompt?: any\n}\n</class>\n\n<class fqcn='react-native.src.api.getApiURL' file='react-native/src/api/open-api.ts'>\nfunction getApiURL(): string { ... }\n</class>\n\n<class fqcn='react-native.src.types._module_.Chat' file='react-native/src/types/Chat.ts'>\nexport type Chat = {\n  id: number;\n  title: string;\n  mode: string;\n  timestamp: number;\n};\n</class>\n\n<class fqcn='react-native.src.chat.util.isAllFileReady' file='react-native/src/chat/util/FileUtils.ts'>\nexport const isAllFileReady = (files: FileInfo[]) => { ... }\n</class>\n\n<class fqcn='react-native.src.prompt._module_.NavigationProp' file='react-native/src/prompt/HeaderLeftView.tsx'>\ntype NavigationProp = DrawerNavigationProp<RouteParamList>\n</class>\n\n<class fqcn='react-native.src.api.parseStreamData' file='react-native/src/api/open-api.ts'>\nconst parseStreamData = (chunk: string, lastChunk: string = '') => { ... }\n</class>\n\n<class fqcn='react-native.src.api.getOpenAIMessages' file='react-native/src/api/open-api.ts'>\nfunction getOpenAIMessages(\n  messages: BedrockMessage[],\n  prompt: SystemPrompt | null\n): OpenAIMessage[] { ... }\n</class>\n\n<class fqcn='react-native.src.settings.getTotalInputTokens' file='react-native/src/settings/ModelPrice.ts'>\nexport function getTotalInputTokens(usage: Usage[]) { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.BedrockVoiceModels' file='react-native/src/storage/Constants.ts'>\nexport const BedrockVoiceModels = ['Nova Sonic']\n</class>\n\n<class fqcn='react-native.src.storage.saveCurrentSystemPrompt' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveCurrentSystemPrompt(prompts: SystemPrompt | null) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveOpenAICompatApiURL' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveOpenAICompatApiURL(apiUrl: string) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.util.isNova' file='react-native/src/chat/util/FileUtils.ts'>\nconst isNova = (): boolean => { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.encryptStorage' file='react-native/src/storage/StorageUtils.ts'>\nexport const encryptStorage = initializeStorage()\n</class>\n\n<class fqcn='react-native.src.storage._module_.keyPrefix' file='react-native/src/storage/StorageUtils.ts'>\nconst keyPrefix = 'bedrock/'\n</class>\n\n<class fqcn='react-native.src.chat.util._module_.hapticOptions' file='react-native/src/chat/util/HapticUtils.ts'>\nconst hapticOptions = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: true\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.getFiles' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nconst getFiles = async (res: ImagePickerResponse) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.createBotMessage' file='react-native/src/chat/ChatScreen.tsx'>\nconst createBotMessage = (mode: string, currentSystemPrompt?: SystemPrompt | null) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.DefaultSystemPrompts' file='react-native/src/storage/Constants.ts'>\nconst DefaultSystemPrompts = [\n  {\n    id: -7,\n    name: 'MENU',\n    prompt: 'Anda memberikan info properti lainnya. Semua pertanyaan prompt bisa dijawab disini',\n    includeHistory: false\n  },\n  {\n    id: -8,\n    name: 'SEARCH WEB',\n    prompt: 'Buka browser web untuk mencari informasi properti di internet',\n    includeHistory: false\n  },\n  {\n    id: -9,\n    name: 'MAPS',\n    prompt: 'Buka peta untuk melihat lokasi properti dan navigasi',\n    includeHistory: false\n  },\n  ...DefaultVoiceSystemPrompts,\n]\n</class>\n\n<class fqcn='react-native.src.storage._module_.imageModelKey' file='react-native/src/storage/StorageUtils.ts'>\nconst imageModelKey = keyPrefix + 'imageModelKey'\n</class>\n\n<class fqcn='react-native.src.chat.component.DefaultIcon' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nconst DefaultIcon = () => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getApiKey' file='react-native/src/storage/StorageUtils.ts'>\nexport function getApiKey(): string { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown._module_.mathViewIndex' file='react-native/src/chat/component/markdown/CustomMarkdownRenderer.tsx'>\nlet mathViewIndex = 0\n</class>\n\n<class fqcn='react-native.src.storage.isNovaCanvas' file='react-native/src/storage/StorageUtils.ts'>\nexport function isNovaCanvas(modelId: string) { ... }\n</class>\n\n<class fqcn='react-native.src.theme._module_.darkColors' file='react-native/src/theme/colors.ts'>\nexport const darkColors: ColorScheme = {\n  background: '#000000',\n  surface: '#1a1a1a',\n  surfaceSecondary: '#2a2a2a',\n  text: '#ffffff',\n  textSecondary: '#cccccc',\n  textTertiary: '#888888',\n  border: '#333333',\n  borderLight: '#444444',\n  shadow: 'rgba(255,255,255,0.1)',\n  card: '#1a1a1a',\n  input: '#2a2a2a',\n  placeholder: '#888888',\n  error: '#ff6b6b',\n  success: '#51cf66',\n  warning: '#ffd43b',\n  info: '#74c0fc',\n  primary: '#0099ff',\n  primaryLight: '#1a1a2e',\n  accent: '#ff7979',\n  overlay: 'rgba(0,0,0,0.8)',\n  codeBackground: '#1a1a1a',\n  selectedBackground: '#2a2a2a',\n  selectedBackgroundMac: '#333333',\n  inputBackground: '#000000',\n  labelBackground: '#000000',\n  messageBackground: '#2a2a2a',\n  reasoningBackground: '#2a2a2a',\n  inputBorder: '#555555',\n  drawerBackground: '#000000',\n  drawerBackgroundMac: '#000000',\n  promptButtonBackground: '#333333',\n  promptButtonBorder: '#333333',\n  promptText: '#cccccc',\n  promptSelectedBorder: '#cccccc',\n  promptAddButtonBackground: '#2a2a2a',\n  promptAddButtonBorder: '#cccccc',\n  promptAddText: '#cccccc',\n  promptDeleteBackground: '#888888',\n  promptDeleteText: '#ffffff',\n  promptScreenInputBorder: '#444444',\n  promptScreenSaveButton: '#0099ff',\n  promptScreenSaveButtonText: '#ffffff',\n  textDarkGray: '#cccccc',\n  inputToolbarBorder: '#cccccc',\n  fileListBackground: '#000000',\n  fileItemBorder: '#cccccc',\n  addButtonBackground: '#333333',\n  chatScreenSplit: '#404040'\n}\n</class>\n\n<class fqcn='react-native.src.storage.getDefaultSystemPrompts' file='react-native/src/storage/Constants.ts'>\nexport function getDefaultSystemPrompts(): SystemPrompt[] { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.BedrockThinkingModels' file='react-native/src/storage/Constants.ts'>\nexport const BedrockThinkingModels = [\n  'Claude 3.7 Sonnet',\n  'Claude Sonnet 4',\n  'Claude Opus 4',\n]\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.IMAGE_FORMATS' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nexport const IMAGE_FORMATS = ['png', 'jpg', 'jpeg', 'gif', 'webp']\n</class>\n\n<class fqcn='react-native.src.storage._module_.modelOrderKey' file='react-native/src/storage/StorageUtils.ts'>\nconst modelOrderKey = keyPrefix + 'modelOrderKey'\n</class>\n\n<class fqcn='react-native.src.api._module_.CallbackFunction' file='react-native/src/api/open-api.ts'>\ntype CallbackFunction = (\n  result: string,\n  complete: boolean,\n  needStop: boolean,\n  usage?: Usage,\n  reasoning?: string\n) => void;\n</class>\n\n<class fqcn='react-native.src.chat.component.ProgressCircle' file='react-native/src/chat/component/ImageProgressBar.tsx'>\nconst ProgressCircle = ({\n  progressAnim,\n  isDark\n}: {\n  progressAnim: Animated.Value;\n  isDark: boolean;\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.types._module_.FileInfo' file='react-native/src/types/Chat.ts'>\nexport type FileInfo = {\n  fileName: string;\n  url: string;\n  videoUrl?: string;\n  videoThumbnailUrl?: string;\n  fileSize: number;\n  format: string;\n  type: FileType;\n  width?: number;\n  height?: number;\n};\n</class>\n\n<class fqcn='react-native.src.storage.isTokenValid' file='react-native/src/storage/StorageUtils.ts'>\nexport function isTokenValid(): boolean { ... }\n</class>\n\n<class fqcn='react-native.src.api.parseChunk' file='react-native/src/api/bedrock-api.ts'>\nfunction parseChunk(rawChunk: string) { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.regionKey' file='react-native/src/storage/StorageUtils.ts'>\nconst regionKey = keyPrefix + 'regionKey'\n</class>\n\n<class fqcn='react-native.src.chat.util.checkFileNumberLimit' file='react-native/src/chat/util/FileUtils.ts'>\nexport const checkFileNumberLimit = (\n  prevFiles: FileInfo[],\n  newFiles: FileInfo[]\n) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getOpenAICompatModels' file='react-native/src/storage/StorageUtils.ts'>\nexport function getOpenAICompatModels(): string { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.DefaultVoicePrompt' file='react-native/src/storage/Constants.ts'>\nexport const DefaultVoicePrompt =\n  'You are a friendly assistant. The user and you will engage in a spoken dialog exchanging the transcripts of a natural real-time conversation. Keep your responses short, generally within five sentences for chatty scenarios.'\n</class>\n\n<class fqcn='react-native.src.storage._module_.deepSeekApiKeyTag' file='react-native/src/storage/StorageUtils.ts'>\nconst deepSeekApiKeyTag = keyPrefix + 'deepSeekApiKeyTag'\n</class>\n\n<class fqcn='react-native.src.storage._module_.DeepSeekModels' file='react-native/src/storage/Constants.ts'>\nexport const DeepSeekModels = [\n  {\n    modelName: 'DeepSeek-V3',\n    modelId: 'deepseek-chat',\n    modelTag: ModelTag.Broperty\n  },\n  {\n    modelName: 'DeepSeek-R1',\n    modelId: 'deepseek-reasoner',\n    modelTag: ModelTag.Broperty\n  },\n]\n</class>\n\n<class fqcn='react-native.src.chat.component.DisplayMode' file='react-native/src/chat/component/CustomFileListComponent.tsx'>\nexport enum DisplayMode {\n  Edit = 'edit',\n  Display = 'display',\n  GenImage = 'genImage'\n}\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.AudioWaveformComponent' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nconst AudioWaveformComponent = React.forwardRef<AudioWaveformRef>(\n  (props, ref) => {\n    const { colors } = useTheme();\n    const [colorOffset, setColorOffset] = useState(0);\n    const barCountRef = useRef(isMac || isPad ? 48 : 32);\n    const barValues = Array(barCountRef.current)\n      .fill(0)\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      .map(() => useSharedValue(0.3));\n    const inputAudioLevelRef = useRef(1);\n    const outputAudioLevelRef = useRef(1);\n    const [audioVolume, setAudioVolume] = useState<number>(1); // Audio volume level (1-10)\n\n    useEffect(() => {\n      // Set up voice chat service callbacks\n      voiceChatService.setOnAudioLevelCallbacks(\n        // Handle audio level changes\n        (source, level) => {\n          if (source === 'microphone') {\n            inputAudioLevelRef.current = level;\n          } else {\n            outputAudioLevelRef.current = level;\n          }\n          const maxLevel = Math.max(\n            inputAudioLevelRef.current,\n            outputAudioLevelRef.current\n          );\n          setAudioVolume(maxLevel);\n        }\n      );\n    }, []);\n\n    // Add reset method for audio levels\n    const resetAudioLevels = useCallback(() => {\n      inputAudioLevelRef.current = 1;\n      outputAudioLevelRef.current = 1;\n    }, []);\n\n    // Expose methods to parent component\n    useImperativeHandle(\n      ref,\n      () => ({\n        resetAudioLevels\n      }),\n      [resetAudioLevels]\n    );\n\n    // Gradient colors from blue to green to purple\n    const gradientColors = [\n      '#4158D0',\n      '#4B5EE8',\n      '#5564FF',\n      '#5F6CFF',\n      '#6975FF',\n      '#737EFF',\n      '#7D87FF',\n      '#8790FF',\n      '#90A0FF',\n      '#8BAFFF',\n      '#86BEFF',\n      '#80CDFF',\n      '#7ADCFF',\n      '#74EBFF',\n      '#6EFAFF',\n      '#68FFFC',\n      '#60F5F0',\n      '#58F0E0',\n      '#50EBD0',\n      '#48E6C0',\n      '#40E1B0',\n      '#38DCA0',\n      '#30D790',\n      '#29D280',\n      '#21CD70',\n      '#41D46C',\n      '#61DB68',\n      '#81E264',\n      '#A1E960',\n      '#B0ED5C',\n      '#C0F158',\n      '#D0F554',\n      '#C8F050',\n      '#BEC24C',\n      '#B49448',\n      '#AA6644',\n      '#A03840',\n      '#963A60',\n      '#8C3C80',\n      '#823EA0',\n      '#7840C0',\n      '#7E4CD8',\n      '#8458F0',\n      '#8A64FF',\n      '#9070FF',\n      '#967CFF',\n      '#9C88FF',\n      '#4158D0',\n    ];\n\n    // Color animation effect - updates every 500ms\n    useEffect(() => {\n      const colorAnimationInterval = setInterval(() => {\n        setColorOffset(prev => (prev + 1) % gradientColors.length);\n      }, 500);\n\n      return () => clearInterval(colorAnimationInterval);\n    }, [gradientColors.length]);\n\n    // Update waveform when volume changes\n    useEffect(() => {\n      // Special handling for volume=1 (silent or not recording)\n      if (audioVolume === 1) {\n        barValues.forEach(bar => {\n          // Fixed low height for all bars\n          const minHeight = 0.05;\n\n          bar.value = withTiming(minHeight, {\n            duration: 300,\n            easing: Easing.bezier(0.25, 0.1, 0.25, 1)\n          });\n        });\n        return;\n      }\n\n      // For volume > 1, animate based on volume level\n      const baseIntensity = audioVolume / 10;\n\n      barValues.forEach((bar, index) => {\n        const centerEffect =\n          1 -\n          Math.abs(\n            (index - barCountRef.current / 2) / (barCountRef.current / 2)\n          ) *\n            0.5;\n        const randomHeight =\n          (Math.random() * 0.6 + 0.2) * baseIntensity * centerEffect;\n        const delay = index * 10;\n\n        bar.value = withSequence(\n          withTiming(randomHeight, {\n            duration: 180 + delay,\n            easing: Easing.bezier(0.25, 0.1, 0.25, 1)\n          }),\n          withTiming(0.05 + Math.random() * 0.15 * baseIntensity, {\n            duration: 220 + delay,\n            easing: Easing.bezier(0.25, 0.1, 0.25, 1)\n          })\n        );\n      });\n    }, [barValues, audioVolume]);\n\n    const animatedBarStyles = barValues.map(bar =>\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useAnimatedStyle(() => ({\n        height: `${bar.value * 100}%`,\n        opacity: 0.7 + bar.value * 0.3\n      }))\n    );\n\n    const styles = createStyles(colors);\n\n    return (\n      <View style={styles.container}>\n        <View style={styles.waveformContainer}>\n          {barValues.map((_, index) => (\n            <Animated.View\n              key={index}\n              style={[\n                styles.bar,\n                animatedBarStyles[index],\n                {\n                  backgroundColor:\n                    gradientColors[\n                      (index + colorOffset) % gradientColors.length\n                    ]\n                },\n              ]}\n            />\n          ))}\n        </View>\n      </View>\n    );\n  }\n)\n</class>\n\n<class fqcn='react-native.src.storage._module_.openAIApiKeyTag' file='react-native/src/storage/StorageUtils.ts'>\nconst openAIApiKeyTag = keyPrefix + 'openAIApiKeyTag'\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.isPad' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nconst isPad = minWidth > 434\n</class>\n\n<class fqcn='react-native.src.settings.TokenUsageScreen' file='react-native/src/settings/TokenUsageScreen.tsx'>\nfunction TokenUsageScreen(): React.JSX.Element { ... }\n</class>\n\n<class fqcn='react-native.src.App' file='react-native/src/App.tsx'>\nconst App = () => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.isNewStabilityImageModel' file='react-native/src/storage/StorageUtils.ts'>\nexport function isNewStabilityImageModel(modelId: string) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getVoiceId' file='react-native/src/storage/StorageUtils.ts'>\nexport function getVoiceId() { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.isVideoSupported' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nexport const isVideoSupported = (): boolean => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.util._module_.MAX_DOCUMENTS' file='react-native/src/chat/util/FileUtils.ts'>\nconst MAX_DOCUMENTS = 5\n</class>\n\n<class fqcn='react-native.src.storage.savePromptId' file='react-native/src/storage/StorageUtils.ts'>\nexport function savePromptId(promptId: number) { ... }\n</class>\n\n<class fqcn='react-native.src.history.AppProvider' file='react-native/src/history/AppProvider.tsx'>\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.PromptListComponent' file='react-native/src/chat/component/PromptListComponent.tsx'>\nexport const PromptListComponent: React.FC<PromptListProps> = ({\n  onSelectPrompt,\n  onSwitchedToTextModel\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.EmptyChatComponentProps' file='react-native/src/chat/component/EmptyChatComponent.tsx'>\ninterface EmptyChatComponentProps {\n  chatMode: ChatMode\n  isLoadingMessages?: boolean\n}\n</class>\n\n<class fqcn='react-native.src.api._module_.ChatResponse' file='react-native/src/api/open-api.ts'>\ntype ChatResponse = {\n  choices: Array<{\n    delta: {\n      content: string;\n      reasoning_content: string;\n      reasoning: string;\n    };\n  }>;\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n    prompt_cache_hit_tokens: number;\n  };\n  error?: {\n    message?: string;\n    metadata?: {\n      raw?: string;\n    };\n  };\n  detail?: string;\n};\n</class>\n\n<class fqcn='react-native.src.chat.util.getBedrockMessagesFromChatMessages' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nexport async function getBedrockMessagesFromChatMessages(\n  messages: SwiftChatMessage[]\n): Promise<BedrockMessage[]> { ... }\n</class>\n\n<class fqcn='react-native.src.types.SystemPrompt' file='react-native/src/types/Chat.ts'>\nexport interface SystemPrompt {\n  id: number\n  name: string\n  prompt: string\n  includeHistory: boolean\n  promptType?: string\n  allowInterruption?: boolean\n  avatar?: string\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown._module_.CopyButton' file='react-native/src/chat/component/markdown/CustomMarkdownRenderer.tsx'>\nexport const CopyButton: React.FC<CopyButtonProps> = React.memo(\n  ({ onCopy, colors, isDark }) => {\n    const [copied, setCopied] = useState(false);\n    const styles = createCustomStyles(colors);\n\n    const handleCopy = useCallback(() => {\n      onCopy();\n      setCopied(true);\n    }, [onCopy]);\n\n    // UseMemo to memoize the image source to prevent flickering\n    const imageSource = useMemo(() => {\n      return copied\n        ? isDark\n          ? require('../../../assets/done_dark.png')\n          : require('../../../assets/done.png')\n        : isDark\n        ? require('../../../assets/copy_grey.png')\n        : require('../../../assets/copy.png');\n    }, [copied, isDark]);\n\n    useEffect(() => {\n      if (copied) {\n        const timer = setTimeout(() => {\n          setCopied(false);\n        }, 2000);\n\n        return () => clearTimeout(timer);\n      }\n    }, [copied]);\n    return (\n      <TouchableOpacity style={styles.copyButtonLayout} onPress={handleCopy}>\n        <Image source={imageSource} style={styles.copyButton} />\n      </TouchableOpacity>\n    );\n  },\n  () => true\n)\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomSendComponent' file='react-native/src/chat/component/CustomSendComponent.tsx'>\nconst CustomSendComponent: React.FC<CustomSendComponentProps> = ({\n  chatStatus,\n  chatMode,\n  selectedFiles,\n  isShowLoading: isShowLoading = false,\n  onStopPress,\n  onFileSelected,\n  onVoiceChatToggle,\n  ...props\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.deleteMessagesBySessionId' file='react-native/src/storage/StorageUtils.ts'>\nexport function deleteMessagesBySessionId(sessionId: number) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.Parser' file='react-native/src/chat/component/markdown/Parser.tsx'>\nclass Parser {\n  private renderer: RendererInterface\n  private styles: MarkedStyles\n  private readonly headingStylesMap: Record<number, TextStyle | undefined>\n  private readonly baseUrl: string\n  constructor(options: ParserOptions) { ... }\n  parse(tokens: Token[]) { ... }\n  private _parse(tokens: Token[], styles?: ViewStyle | TextStyle | ImageStyle) { ... }\n  private _parseToken(\n      token: Token,\n      styles?: ViewStyle | TextStyle | ImageStyle\n    ): ReactNode { ... }\n  private getNormalizedSiblingNodesForBlockAndInlineTokens(\n      tokens: Token[],\n      textStyle?: TextStyle\n    ): ReactNode[] { ... }\n  private hasDuplicateTextChildToken(token: Token): boolean { ... }\n}\n</class>\n\n<class fqcn='react-native.src.chat.util._module_.hapticFeedbackEnabled' file='react-native/src/chat/util/HapticUtils.ts'>\nlet hapticFeedbackEnabled = getHapticEnabled()\n</class>\n\n<class fqcn='react-native.src.storage.getCurrentSystemPrompt' file='react-native/src/storage/StorageUtils.ts'>\nexport function getCurrentSystemPrompt(): SystemPrompt | null { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveCurrentVoiceSystemPrompt' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveCurrentVoiceSystemPrompt(prompts: SystemPrompt | null) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.isModelSupportUploadImages' file='react-native/src/chat/component/CustomSendComponent.tsx'>\nconst isModelSupportUploadImages = (chatMode: ChatMode): boolean => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.styles' file='react-native/src/chat/component/CustomScrollToBottomComponent.tsx'>\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 28,\n    height: 28,\n    position: 'relative'\n  },\n  image: {\n    width: 18,\n    height: 18,\n    position: 'absolute'\n  }\n})\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.NavigationProp' file='react-native/src/chat/component/EmptyChatComponent.tsx'>\ntype NavigationProp = DrawerNavigationProp<RouteParamList>\n</class>\n\n<class fqcn='react-native.src.chat.component.getFileType' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nexport const getFileType = (format: string) => { ... }\n</class>\n\n<class fqcn='react-native.src.api.getOllamaMessages' file='react-native/src/api/ollama-api.ts'>\nfunction getOllamaMessages(\n  messages: BedrockMessage[],\n  prompt: SystemPrompt | null\n): OpenAIMessage[] { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.ImageSpinnerProps' file='react-native/src/chat/component/ImageSpinner.tsx'>\ninterface ImageSpinnerProps {\n  size?: number\n  source: ImageSourcePropType\n  visible: boolean\n  isRotate?: boolean\n}\n</class>\n\n<class fqcn='react-native.src.storage.getDefaultImageModels' file='react-native/src/storage/Constants.ts'>\nexport function getDefaultImageModels() { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomSendComponentProps' file='react-native/src/chat/component/CustomSendComponent.tsx'>\ninterface CustomSendComponentProps extends SendProps<SwiftChatMessage> {\n  chatStatus: ChatStatus\n  chatMode: ChatMode\n  selectedFiles: FileInfo[]\n  isShowLoading?: boolean\n  onStopPress: () => void\n  onFileSelected: (files: FileInfo[]) => void\n  onVoiceChatToggle?: () => void\n}\n</class>\n\n<class fqcn='react-native.src.api.invokeOpenAIWithCallBack' file='react-native/src/api/open-api.ts'>\nexport const invokeOpenAIWithCallBack = async (\n  messages: BedrockMessage[],\n  prompt: SystemPrompt | null,\n  shouldStop: () => boolean,\n  controller: AbortController,\n  callback: CallbackFunction\n) => { ... }\n</class>\n\n<class fqcn='react-native.src.prompt._module_.PromptScreenRouteProp' file='react-native/src/prompt/PromptScreen.tsx'>\ntype PromptScreenRouteProp = RouteProp<RouteParamList, 'Prompt'>\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomComposerProps' file='react-native/src/chat/component/CustomChatFooter.tsx'>\ninterface CustomComposerProps {\n  files: FileInfo[]\n  onFileUpdated: (files: FileInfo[], isUpdate?: boolean) => void\n  onSystemPromptUpdated: (prompt: SystemPrompt | null) => void\n  onSwitchedToTextModel: () => void\n  chatMode: ChatMode\n  isShowSystemPrompt: boolean\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.createStyles' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getDefaultTextModels' file='react-native/src/storage/Constants.ts'>\nexport function getDefaultTextModels() { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.GPTModels' file='react-native/src/storage/Constants.ts'>\nexport const GPTModels = [\n  { modelName: 'GPT-4.1', modelId: 'gpt-4.1', modelTag: ModelTag.OpenAI },\n  {\n    modelName: 'GPT-4.1-mini',\n    modelId: 'gpt-4.1-mini',\n    modelTag: ModelTag.OpenAI\n  },\n  {\n    modelName: 'GPT-4.1-nano',\n    modelId: 'gpt-4.1-nano',\n    modelTag: ModelTag.OpenAI\n  },\n  { modelName: 'GPT-4o', modelId: 'gpt-4o', modelTag: ModelTag.OpenAI },\n  {\n    modelName: 'GPT-4o mini',\n    modelId: 'gpt-4o-mini',\n    modelTag: ModelTag.OpenAI\n  },\n]\n</class>\n\n<class fqcn='react-native.src.chat.component.ModelSelectionModal' file='react-native/src/chat/component/ModelSelectionModal.tsx'>\nexport const ModelSelectionModal: React.FC<ModelSelectionModalProps> = ({\n  visible,\n  onClose,\n  iconPosition = {\n    x: SCREEN_WIDTH - 50,\n    y: 70\n  }\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.util._module_.MAX_IMAGES' file='react-native/src/chat/util/FileUtils.ts'>\nconst MAX_IMAGES = 20\n</class>\n\n<class fqcn='react-native.src.storage.saveOpenAICompatModels' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveOpenAICompatModels(models: string) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveAllSystemPrompts' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveAllSystemPrompts(prompts: SystemPrompt[]) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.EXTRA_DOCUMENT_FORMATS' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nexport const EXTRA_DOCUMENT_FORMATS = [\n  'json',\n  'py',\n  'ts',\n  'tsx',\n  'js',\n  'kt',\n  'java',\n  'swift',\n  'c',\n  'm',\n  'h',\n  'sh',\n  'cpp',\n  'rs',\n  'go',\n  'class',\n  'cs',\n  'php',\n  'rb',\n  'dart',\n  'sql',\n  'css',\n  'xml',\n  'yaml',\n]\n</class>\n\n<class fqcn='react-native.src.storage._module_.DefaultTextModel' file='react-native/src/storage/Constants.ts'>\nexport const DefaultTextModel = [\n  {\n    modelName: 'DeepSeek-V3',\n    modelId: 'deepseek-chat',\n    modelTag: ModelTag.Broperty\n  },\n]\n</class>\n\n<class fqcn='react-native.src.theme.ThemeProviderProps' file='react-native/src/theme/ThemeContext.tsx'>\ninterface ThemeProviderProps {\n  children: ReactNode\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.ModelIconButton' file='react-native/src/chat/component/ModelIconButton.tsx'>\nexport const ModelIconButton: React.FC<ModelIconButtonProps> = ({\n  onPress\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.util.ImageContent' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nexport interface ImageContent {\n  image: ImageInfo\n}\n</class>\n\n<class fqcn='react-native.src.settings.TabButton' file='react-native/src/settings/TabButton.tsx'>\nfunction TabButton({\n  label,\n  isSelected,\n  onPress\n}: TabButtonProps): React.JSX.Element { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getSystemPrompts' file='react-native/src/storage/StorageUtils.ts'>\nexport function getSystemPrompts(type?: string): SystemPrompt[] { ... }\n</class>\n\n<class fqcn='react-native.src.chat.createStyles' file='react-native/src/chat/ChatScreen.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveThinkingEnabled' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveThinkingEnabled(enabled: boolean) { ... }\n</class>\n\n<class fqcn='react-native.src.types.Metrics' file='react-native/src/types/Chat.ts'>\nexport interface Metrics {\n  latencyMs: string\n  speed: string\n}\n</class>\n\n<class fqcn='react-native.src.api.parseStreamData' file='react-native/src/api/open-api.ts'>\nconst parseStreamData = (chunk: string, lastChunk: string = '') => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown._module_.ALLOWED_STYLE_PROPERTIES' file='react-native/src/chat/component/markdown/CustomCodeHighlighter.tsx'>\nconst ALLOWED_STYLE_PROPERTIES: Record<string, boolean> = {\n  color: true,\n  background: true,\n  backgroundColor: true,\n  fontWeight: true,\n  fontStyle: true\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.ModelSelectionModalProps' file='react-native/src/chat/component/ModelSelectionModal.tsx'>\ninterface ModelSelectionModalProps {\n  visible: boolean\n  onClose: () => void\n  iconPosition?: { x: number; y: number }\n}\n</class>\n\n<class fqcn='react-native.src.storage.saveKeys' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveKeys(apiUrl: string, apiKey: string) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.getTableWidthArr' file='react-native/src/chat/component/markdown/CustomMarkdownRenderer.tsx'>\nconst getTableWidthArr = (\n  totalCols: number,\n  windowWidth: number,\n  windowHeight: number\n) => { ... }\n</class>\n\n<class fqcn='react-native.src.history.AppProviderProps' file='react-native/src/history/AppProvider.tsx'>\ninterface AppProviderProps {\n  children: ReactNode\n}\n</class>\n\n<class fqcn='react-native.src.chat.service._module_.voiceChatEmitter' file='react-native/src/chat/service/VoiceChatService.ts'>\nconst voiceChatEmitter = VoiceChatModule\n  ? new NativeEventEmitter(VoiceChatModule)\n  : null\n</class>\n\n<class fqcn='react-native.src.chat.util.getFileTypeSummary' file='react-native/src/chat/util/FileUtils.ts'>\nexport const getFileTypeSummary = (files: FileInfo[]) => { ... }\n</class>\n\n<class fqcn='react-native.src.prompt.PresetPromptListProps' file='react-native/src/prompt/PresetPromptList.tsx'>\ninterface PresetPromptListProps {\n}\n</class>\n\n<class fqcn='react-native.src.types._module_.OllamaModel' file='react-native/src/types/Chat.ts'>\nexport type OllamaModel = {\n  name: string;\n};\n</class>\n\n<class fqcn='react-native.src.theme.ThemeProvider' file='react-native/src/theme/ThemeContext.tsx'>\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomAddFileComponent' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nexport const CustomAddFileComponent: React.FC<CustomRenderActionsProps> = ({\n  onFileSelected,\n  mode = 'default',\n  chatMode = ChatMode.Text\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.history._module_.AppContext' file='react-native/src/history/AppProvider.tsx'>\nconst AppContext = createContext<AppContextType | undefined>(undefined)\n</class>\n\n<class fqcn='react-native.src.storage.getThinkingEnabled' file='react-native/src/storage/StorageUtils.ts'>\nexport function getThinkingEnabled() { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.ollamaApiUrlKey' file='react-native/src/storage/StorageUtils.ts'>\nconst ollamaApiUrlKey = keyPrefix + 'ollamaApiUrlKey'\n</class>\n\n<class fqcn='react-native.src.utils._module_.isMacCatalyst' file='react-native/src/utils/PlatformUtils.ts'>\nexport const isMacCatalyst =\n  Platform.OS === 'ios' && PlatformModule?.isMacCatalyst === true\n</class>\n\n<class fqcn='react-native.src._module_.minWidth' file='react-native/src/App.tsx'>\nconst minWidth = screenWidth > screenHeight ? screenHeight : screenWidth\n</class>\n\n<class fqcn='react-native.src.storage._module_.DefaultVoiceSystemPrompts' file='react-native/src/storage/Constants.ts'>\nexport const DefaultVoiceSystemPrompts = [\n  {\n    id: -4,\n    name: 'LearnWords',\n    prompt: `Please act as an English vocabulary coach. In each response, follow this exact format:\n\n1. If the user has spoken: Score their speaking from 1-10\n2. If score < 7: Provide brief correction tips and ask them to repeat the same word\n3. If score ≥ 7: ask user to read a new English word\n\nKeep all responses under 5 sentences. Begin by introducing yourself and providing the first practice word.\n\nRemember: ALWAYS start with a score after the user speaks`,\n    includeHistory: true,\n    promptType: 'voice',\n    allowInterruption: false\n  },\n  {\n    id: -5,\n    name: 'LearnSentences',\n    prompt: `Please act as an English pronunciation coach. In each response, follow this exact format:\n\n1. If the user has spoken: Score their pronunciation from 1-10\n2. If score < 7: Provide brief correction tips and ask them to repeat the same sentence\n3. If score ≥ 7: Introduce a new common English phrase for practice\n\nKeep all responses under 5 sentences. Begin by introducing yourself and providing the first practice sentence.\n\nRemember: ALWAYS start with a score after the user speaks`,\n    includeHistory: true,\n    promptType: 'voice',\n    allowInterruption: false\n  },\n  {\n    id: -6,\n    name: 'Story',\n    prompt:\n      'You are a storytelling expert. Please first ask the user what type of story they would like to hear, and then tell that story with emotion and expressiveness.',\n    includeHistory: true,\n    promptType: 'voice',\n    allowInterruption: true\n  },\n]\n</class>\n\n<class fqcn='react-native.src.storage.saveOpenAIApiKey' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveOpenAIApiKey(apiKey: string) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.util.saveImageToLocal' file='react-native/src/chat/util/FileUtils.ts'>\nexport const saveImageToLocal = async (\n  base64ImageData: string\n): Promise<string> => { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.textModelKey' file='react-native/src/storage/StorageUtils.ts'>\nconst textModelKey = keyPrefix + 'textModelKey'\n</class>\n\n<class fqcn='react-native.src.settings._module_.ModelPrice' file='react-native/src/settings/ModelPrice.ts'>\nexport const ModelPrice: ModelPriceType = {\n  textModelPrices: {\n    'Bedrock DeepSeek-R1': {\n      inputTokenPrice: 0.00135,\n      outputTokenPrice: 0.0054\n    },\n    'DeepSeek-V3': {\n      inputTokenPrice: 0.00027,\n      outputTokenPrice: 0.0011\n    },\n    'DeepSeek-R1': {\n      inputTokenPrice: 0.00055,\n      outputTokenPrice: 0.00219\n    },\n    'GPT-4.1': {\n      inputTokenPrice: 0.002,\n      outputTokenPrice: 0.008\n    },\n    'GPT-4.1-mini': {\n      inputTokenPrice: 0.0004,\n      outputTokenPrice: 0.0016\n    },\n    'GPT-4.1-nano': {\n      inputTokenPrice: 0.0001,\n      outputTokenPrice: 0.0004\n    },\n    'GPT-4o': {\n      inputTokenPrice: 0.0025,\n      outputTokenPrice: 0.01\n    },\n    'GPT-4o mini': {\n      inputTokenPrice: 0.00015,\n      outputTokenPrice: 0.0006\n    },\n    'Titan Text G1 - Lite': {\n      inputTokenPrice: 0.00015,\n      outputTokenPrice: 0.0002\n    },\n    'Titan Text G1 - Express': {\n      inputTokenPrice: 0.0002,\n      outputTokenPrice: 0.0006\n    },\n    'Titan Text G1 - Premier': {\n      inputTokenPrice: 0.0005,\n      outputTokenPrice: 0.0015\n    },\n    'Nova Pro': {\n      inputTokenPrice: 0.0008,\n      outputTokenPrice: 0.0032\n    },\n    'Nova Lite': {\n      inputTokenPrice: 0.00006,\n      outputTokenPrice: 0.00024\n    },\n    'Nova Micro': {\n      inputTokenPrice: 0.000035,\n      outputTokenPrice: 0.00014\n    },\n    'Claude 3.5 Sonnet v2': {\n      inputTokenPrice: 0.003,\n      outputTokenPrice: 0.015\n    },\n    'Claude 3.5 Haiku': {\n      inputTokenPrice: 0.0008,\n      outputTokenPrice: 0.004\n    },\n    'Claude Instant': {\n      inputTokenPrice: 0.0008,\n      outputTokenPrice: 0.0024\n    },\n    Claude: {\n      inputTokenPrice: 0.008,\n      outputTokenPrice: 0.024\n    },\n    'Claude 3 Sonnet': {\n      inputTokenPrice: 0.003,\n      outputTokenPrice: 0.015\n    },\n    'Claude 3 Haiku': {\n      inputTokenPrice: 0.00025,\n      outputTokenPrice: 0.00125\n    },\n    'Claude 3 Opus': {\n      inputTokenPrice: 0.015,\n      outputTokenPrice: 0.075\n    },\n    'Claude 3.5 Sonnet': {\n      inputTokenPrice: 0.003,\n      outputTokenPrice: 0.015\n    },\n    'Claude 3.7 Sonnet': {\n      inputTokenPrice: 0.003,\n      outputTokenPrice: 0.015\n    },\n    Command: {\n      inputTokenPrice: 0.0015,\n      outputTokenPrice: 0.002\n    },\n    'Command R': {\n      inputTokenPrice: 0.0005,\n      outputTokenPrice: 0.0015\n    },\n    'Command R+': {\n      inputTokenPrice: 0.003,\n      outputTokenPrice: 0.015\n    },\n    'Command Light': {\n      inputTokenPrice: 0.0003,\n      outputTokenPrice: 0.0006\n    },\n    'Llama 3 8B Instruct': {\n      inputTokenPrice: 0.0003,\n      outputTokenPrice: 0.0006\n    },\n    'Llama 3 70B Instruct': {\n      inputTokenPrice: 0.00265,\n      outputTokenPrice: 0.0035\n    },\n    'Llama 3.1 8B Instruct': {\n      inputTokenPrice: 0.00022,\n      outputTokenPrice: 0.00022\n    },\n    'Llama 3.1 70B Instruct': {\n      inputTokenPrice: 0.00072,\n      outputTokenPrice: 0.00072\n    },\n    'Llama 3.1 405B Instruct': {\n      inputTokenPrice: 0.0024,\n      outputTokenPrice: 0.0024\n    },\n    'Llama 3.2 1B Instruct': {\n      inputTokenPrice: 0.0001,\n      outputTokenPrice: 0.0001\n    },\n    'Llama 3.2 3B Instruct': {\n      inputTokenPrice: 0.00015,\n      outputTokenPrice: 0.00015\n    },\n    'Llama 3.2 11B Instruct': {\n      inputTokenPrice: 0.00016,\n      outputTokenPrice: 0.00016\n    },\n    'Llama 3.2 90B Instruct': {\n      inputTokenPrice: 0.00072,\n      outputTokenPrice: 0.00072\n    },\n    'Mistral 7B Instruct': {\n      inputTokenPrice: 0.00015,\n      outputTokenPrice: 0.0002\n    },\n    'Mixtral 8x7B Instruct': {\n      inputTokenPrice: 0.00045,\n      outputTokenPrice: 0.0007\n    },\n    'Mistral Small (24.02)': {\n      inputTokenPrice: 0.001,\n      outputTokenPrice: 0.003\n    },\n    'Mistral Large (24.02)': {\n      inputTokenPrice: 0.004,\n      outputTokenPrice: 0.012\n    },\n    'Mistral Large (24.07)': {\n      inputTokenPrice: 0.002,\n      outputTokenPrice: 0.006\n    },\n    'Jamba-Instruct': {\n      inputTokenPrice: 0.0005,\n      outputTokenPrice: 0.0007\n    },\n    'Jamba 1.5 Large': {\n      inputTokenPrice: 0.002,\n      outputTokenPrice: 0.008\n    },\n    'Jamba 1.5 Mini': {\n      inputTokenPrice: 0.0002,\n      outputTokenPrice: 0.0004\n    }\n  },\n  imageModelPrices: {\n    'Titan Image Generator G1': {\n      small: 0.008,\n      medium: 0.01\n    },\n    'Titan Image Generator G1 v2': {\n      small: 0.008,\n      medium: 0.01\n    },\n    'Nova Canvas': {\n      medium: 0.04,\n      large: 0.06\n    },\n    'SDXL 1.0': {\n      medium: 0.04\n    },\n    'SD3 Large 1.0': {\n      medium: 0.08\n    },\n    'Stable Diffusion 3.5 Large': {\n      medium: 0.08\n    },\n    'Stable Image Core 1.0': {\n      medium: 0.04\n    },\n    'Stable Image Ultra 1.0': {\n      medium: 0.14\n    }\n  }\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.CustomMarkdownRenderer' file='react-native/src/chat/component/markdown/CustomMarkdownRenderer.tsx'>\nexport class CustomMarkdownRenderer\n  extends Renderer\n  implements RendererInterface {\n  private width = Dimensions.get('window').width\n  private height = Dimensions.get('window').height\n  private colors: ColorScheme\n  private styles: ReturnType<typeof createCustomStyles>\n  private isDark: boolean\n  constructor(\n      private onImagePress: (pressMode: PressMode, url: string) => void,\n      colors: ColorScheme,\n      isDark: boolean\n    ) { ... }\n  getTextView(children: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  getNodeForTextArray(text: ReactNode[], styles?: TextStyle): ReactNode { ... }\n  codespan(text: string, styles?: TextStyle): ReactNode { ... }\n  text(text: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  strong(children: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  em(children: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  br(): ReactNode { ... }\n  del(children: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  heading(text: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  escape(text: string, styles?: TextStyle): ReactNode { ... }\n  image(uri: string, alt?: string, style?: ImageStyle): ReactNode { ... }\n  code(\n      text: string,\n      language?: string,\n      _containerStyle?: ViewStyle,\n      _textStyle?: TextStyle\n    ): ReactNode { ... }\n  table(\n      header: ReactNode[][],\n      rows: ReactNode[][][],\n      tableStyle?: ViewStyle,\n      rowStyle?: ViewStyle,\n      cellStyle?: ViewStyle\n    ): React.ReactNode { ... }\n  list(\n      ordered: boolean,\n      li: ReactNode[],\n      listStyle?: ViewStyle,\n      textStyle?: TextStyle,\n      startIndex?: number\n    ): ReactNode { ... }\n  custom(\n      identifier: string,\n      _raw: string,\n      _children?: ReactNode[],\n      args?: Record<string, unknown>\n    ): ReactNode { ... }\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown._module_.ChatMarkdownProps' file='react-native/src/chat/component/markdown/Markdown.tsx'>\ntype ChatMarkdownProps = MarkdownProps & {\n  chatStatus: ChatStatus;\n};\n</class>\n\n<class fqcn='react-native.src.chat.component.createStyles' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomScrollToBottomComponent' file='react-native/src/chat/component/CustomScrollToBottomComponent.tsx'>\nexport const CustomScrollToBottomComponent = (): React.ReactNode => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getImageModel' file='react-native/src/storage/StorageUtils.ts'>\nexport function getImageModel(): Model { ... }\n</class>\n\n<class fqcn='react-native.src.settings.createStyles' file='react-native/src/settings/SettingsScreen.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveOpenAICompatApiKey' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveOpenAICompatApiKey(apiKey: string) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.CircularProgress' file='react-native/src/chat/component/CustomFileListComponent.tsx'>\nconst CircularProgress = ({\n  progress,\n  colors\n}: {\n  progress: number;\n  colors: ColorScheme;\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat._module_.imagePlaceholder' file='react-native/src/chat/ChatScreen.tsx'>\nconst imagePlaceholder = '![](bedrock://imgProgress)'\n</class>\n\n<class fqcn='react-native.src.chat.util.setHapticFeedbackEnabled' file='react-native/src/chat/util/HapticUtils.ts'>\nexport function setHapticFeedbackEnabled(isEnabled: boolean) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomMessageProps' file='react-native/src/chat/component/CustomMessageComponent.tsx'>\ninterface CustomMessageProps extends MessageProps<SwiftChatMessage> {\n  chatStatus: ChatStatus\n  isLastAIMessage?: boolean\n  onRegenerate?: () => void\n}\n</class>\n\n<class fqcn='react-native.src.storage._module_.hapticEnabledKey' file='react-native/src/storage/StorageUtils.ts'>\nconst hapticEnabledKey = keyPrefix + 'hapticEnabled'\n</class>\n\n<class fqcn='react-native.src.chat.service._module_.voiceChatService' file='react-native/src/chat/service/VoiceChatService.ts'>\nexport const voiceChatService = new VoiceChatService()\n</class>\n\n<class fqcn='react-native.src.storage._module_.DefaultRegion' file='react-native/src/storage/Constants.ts'>\nexport const DefaultRegion = 'ap-southeast-1'\n</class>\n\n<class fqcn='react-native.src.api.getApiPrefix' file='react-native/src/api/bedrock-api.ts'>\nfunction getApiPrefix(): string { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getAllImageSize' file='react-native/src/storage/StorageUtils.ts'>\nexport function getAllImageSize(imageModelId: string = '') { ... }\n</class>\n\n<class fqcn='react-native.src.history._module_.DrawerType' file='react-native/src/history/AppProvider.tsx'>\nexport type DrawerType = 'permanent' | 'slide'\n</class>\n\n<class fqcn='react-native.src.utils.getModelIcon' file='react-native/src/utils/ModelUtils.ts'>\nexport const getModelIcon = (\n  modelTag: string,\n  modelId: string | undefined,\n  isDark: boolean\n) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.Markdown' file='react-native/src/chat/component/markdown/Markdown.tsx'>\nconst Markdown = ({\n  value,\n  flatListProps,\n  theme,\n  baseUrl,\n  renderer,\n  styles,\n  tokenizer,\n  chatStatus\n}: ChatMarkdownProps) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getDeepSeekApiKey' file='react-native/src/storage/StorageUtils.ts'>\nexport function getDeepSeekApiKey(): string { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getOpenAIApiKey' file='react-native/src/storage/StorageUtils.ts'>\nexport function getOpenAIApiKey(): string { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.isVideoFormat' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nexport const isVideoFormat = (format: string) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveSystemPrompts' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveSystemPrompts(prompts: SystemPrompt[], type?: string) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.HeaderRightButtonProps' file='react-native/src/chat/component/CustomHeaderRightButton.tsx'>\ninterface HeaderRightButtonProps {\n  onPress: (event: GestureResponderEvent) => void\n  imageSource: ImageSourcePropType\n}\n</class>\n\n<class fqcn='react-native.src.history.getTodayTimestamp' file='react-native/src/history/HistoryGroupUtil.ts'>\nfunction getTodayTimestamp(): number { ... }\n</class>\n\n<class fqcn='react-native.src.prompt._module_.RootStackParamList' file='react-native/src/prompt/PresetPromptList.tsx'>\ntype RootStackParamList = {\n  Drawer: undefined;\n  TokenUsage: undefined;\n  Prompt: { prompt?: any };\n  PresetPrompts: undefined;\n};\n</class>\n\n<class fqcn='react-native.src.types._module_.RouteParamList' file='react-native/src/types/RouteTypes.ts'>\nexport type RouteParamList = {\n  Drawer: {\n  screen?: keyof DrawerParamList;\n  params?: DrawerParamList[keyof DrawerParamList];\n} | undefined;\nTokenUsage: NonNullable<unknown>;\nPrompt: {\n  prompt?: SystemPrompt;\n};\nPresetPrompts: NonNullable<unknown>;\nWebView: NonNullable<unknown>;\nMaps: NonNullable<unknown>;\n};\n</class>\n\n<class fqcn='react-native.src.storage.getRegion' file='react-native/src/storage/StorageUtils.ts'>\nexport function getRegion() { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.createStyles' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.CodeHighlighterProps' file='react-native/src/chat/component/markdown/CustomCodeHighlighter.tsx'>\nexport interface CodeHighlighterProps extends SyntaxHighlighterProps {\n  hljsStyle: ReactStyle\n  textStyle?: StyleProp<TextStyle>\n  scrollViewProps?: ScrollViewProps\n  containerStyle?: StyleProp<ViewStyle>\n}\n</class>\n\n<class fqcn='react-native.src.renderCustomDrawerContent' file='react-native/src/App.tsx'>\nconst renderCustomDrawerContent = (\n  props: React.JSX.IntrinsicAttributes & DrawerContentComponentProps\n) => { ... }\n</class>\n\n<class fqcn='react-native.src.settings.createStyles' file='react-native/src/settings/SettingsScreen.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomFileProps' file='react-native/src/chat/component/CustomFileListComponent.tsx'>\ninterface CustomFileProps {\n  files: FileInfo[]\n  onFileUpdated?: (files: FileInfo[], isUpdate?: boolean) => void\n  mode?: DisplayMode\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.createStyles' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.service.VoiceChatService' file='react-native/src/chat/service/VoiceChatService.ts'>\nexport class VoiceChatService {\n  private isInitialized = false\n  private subscriptions: EmitterSubscription[] = []\n  private onTranscriptReceivedCallback?: (role: string, text: string) => void\n  private onErrorCallback?: (message: string) => void\n  private onAudioLevelChangedCallback?: (source: string, level: number) => void\n  constructor() { ... }\n  public setCallbacks(\n      onTranscriptReceived?: (role: string, text: string) => void,\n      onError?: (message: string) => void\n    ) { ... }\n  public setOnAudioLevelCallbacks(\n      onAudioLevelChanged?: (source: string, level: number) => void\n    ) { ... }\n  private setupEventListeners() { ... }\n  private async getValidConfig(): Promise<object | null> { ... }\n  public async initialize(): Promise<boolean> { ... }\n  public async startConversation(): Promise<boolean> { ... }\n  public async endConversation(): Promise<boolean> { ... }\n  public cleanup() { ... }\n}\n</class>\n\n<class fqcn='react-native.src.types._module_.DrawerParamList' file='react-native/src/types/RouteTypes.ts'>\nexport type DrawerParamList = {\n  Bedrock: {\n    sessionId?: number;\n    tapIndex?: number;\n    mode?: ChatMode;\n    presetPrompt?: PresetPrompt;\n  };\n};\n</class>\n\n<class fqcn='react-native.src.chat.util._module_.MAX_NOVA_VIDEOS' file='react-native/src/chat/util/FileUtils.ts'>\nconst MAX_NOVA_VIDEOS = 1\n</class>\n\n<class fqcn='react-native.src.history.getFirstDayOfMonthTimestamp' file='react-native/src/history/HistoryGroupUtil.ts'>\nfunction getFirstDayOfMonthTimestamp(yearMonth: string): number { ... }\n</class>\n\n<class fqcn='react-native.src.types.FileType' file='react-native/src/types/Chat.ts'>\nexport enum FileType {\n  document = 'document',\n  image = 'image',\n  video = 'video',\n  unSupported = 'unSupported'\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.CustomTokenizer' file='react-native/src/chat/component/markdown/CustomTokenizer.ts'>\nexport class CustomTokenizer extends MarkedTokenizer<CustomToken> {\n  list(this: MarkedTokenizer<CustomToken>, src: string) { ... }\n  processLatex(src: string): { token: CustomToken | null; raw: string } | null { ... }\n  paragraph(\n      src: string\n    ): ReturnType<MarkedTokenizer<CustomToken>['paragraph']> { ... }\n  private processDollarLatex(src: string): CustomToken | null { ... }\n  private processLatexInText(\n      src: string,\n      match: RegExpMatchArray,\n      isDisplayMode: boolean,\n      extractParts: (\n        src: string,\n        match: RegExpMatchArray\n      ) => {\n        beforeFormula: string;\n        formula: string;\n        formulaContent: string;\n        afterFormula: string;\n      }\n    ): ReturnType<MarkedTokenizer<CustomToken>['text']> { ... }\n  text(src: string): ReturnType<MarkedTokenizer<CustomToken>['text']> { ... }\n  escape(src: string): ReturnType<MarkedTokenizer<CustomToken>['escape']> { ... }\n}\n</class>\n\n<class fqcn='react-native.src.api.isOpenRouterRequest' file='react-native/src/api/open-api.ts'>\nfunction isOpenRouterRequest(): boolean { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.RegionList' file='react-native/src/storage/Constants.ts'>\nconst RegionList = [\n  'us-west-2',\n  'us-east-1',\n  'us-east-2',\n  'ap-south-1',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ca-central-1',\n  'eu-central-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'eu-north-1',\n  'sa-east-1',\n]\n</class>\n\n<class fqcn='react-native.src._module_.Drawer' file='react-native/src/App.tsx'>\nconst Drawer = createDrawerNavigator<DrawerParamList>()\n</class>\n\n<class fqcn='react-native.src.chat.component.isDocumentFormat' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nexport const isDocumentFormat = (format: string) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.minWidth' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nconst minWidth = screenWidth > screenHeight ? screenHeight : screenWidth\n</class>\n\n<class fqcn='react-native.src.chat.util.trigger' file='react-native/src/chat/util/HapticUtils.ts'>\nexport function trigger(method: HapticFeedbackTypes) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getMessageListStr' file='react-native/src/storage/StorageUtils.ts'>\nfunction getMessageListStr() { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveAllModels' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveAllModels(allModels: AllModel) { ... }\n</class>\n\n<class fqcn='react-native.src.history.CustomDrawerContent' file='react-native/src/history/CustomDrawerContent.tsx'>\nconst CustomDrawerContent: React.FC<DrawerContentComponentProps> = ({\n  navigation\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.AnimatedImage' file='react-native/src/chat/component/ImageProgressBar.tsx'>\nconst AnimatedImage = Animated.createAnimatedComponent(Image)\n</class>\n\n<class fqcn='react-native.src.storage._module_.openAICompatApiURLKey' file='react-native/src/storage/StorageUtils.ts'>\nconst openAICompatApiURLKey = keyPrefix + 'openAICompatApiURLKey'\n</class>\n\n<class fqcn='react-native.src.chat.component.isImageFormat' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nexport const isImageFormat = (format: string) => { ... }\n</class>\n\n<class fqcn='react-native.src.history.AppContextType' file='react-native/src/history/AppProvider.tsx'>\ninterface AppContextType {\n  sendEvent: (event: string, params?: EventData) => void\n  event: { event: string; params?: EventData } | null\n  drawerType: DrawerType\n  setDrawerType: (type: DrawerType) => void\n}\n</class>\n\n<class fqcn='react-native.src.api._module_.isDev' file='react-native/src/api/bedrock-api.ts'>\nexport const isDev = false\n</class>\n\n<class fqcn='react-native.src.storage._module_.modelUsageKey' file='react-native/src/storage/StorageUtils.ts'>\nconst modelUsageKey = keyPrefix + 'modelUsageKey'\n</class>\n\n<class fqcn='react-native.src.chat.util._module_.BedrockMessage' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nexport type BedrockMessage = {\n  role: string;\n  content: MessageContent[];\n};\n</class>\n\n<class fqcn='react-native.src.chat.util.DocumentContent' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nexport interface DocumentContent {\n  document: {\n      format: string;\n      name: string;\n      source: {\n        bytes: string;\n      };\n    }\n}\n</class>\n\n<class fqcn='react-native.src.prompt.createStyles' file='react-native/src/prompt/PromptScreen.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.theme.ThemeContextType' file='react-native/src/theme/ThemeContext.tsx'>\ninterface ThemeContextType {\n  colors: ColorScheme\n  isDark: boolean\n  colorScheme: 'light' | 'dark'\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomFileListComponent' file='react-native/src/chat/component/CustomFileListComponent.tsx'>\nexport const CustomFileListComponent: React.FC<CustomFileProps> = ({\n  files,\n  onFileUpdated,\n  mode = DisplayMode.Edit\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.api._module_.OllamaResponse' file='react-native/src/api/ollama-api.ts'>\ntype OllamaResponse = {\n  model: string;\n  created_at: string;\n  message?: {\n    role: string;\n    content: string;\n  };\n  done: boolean;\n  prompt_eval_count: number;\n  eval_count: number;\n};\n</class>\n\n<class fqcn='react-native.src.api._module_.CallbackFunction' file='react-native/src/api/open-api.ts'>\ntype CallbackFunction = (\n  result: string,\n  complete: boolean,\n  needStop: boolean,\n  usage?: Usage,\n  reasoning?: string\n) => void;\n</class>\n\n<class fqcn='react-native.src.prompt._module_.PresetPromptListNavigationProp' file='react-native/src/prompt/PresetPromptList.tsx'>\ntype PresetPromptListNavigationProp = NativeStackNavigationProp<RootStackParamList>\n</class>\n\n<class fqcn='react-native.src.theme._module_.lightColors' file='react-native/src/theme/colors.ts'>\nexport const lightColors: ColorScheme = {\n  background: '#ffffff',\n  surface: '#f5f5f5',\n  surfaceSecondary: '#f9f9f9',\n  text: '#000000',\n  textSecondary: '#666666',\n  textTertiary: '#999999',\n  border: '#e0e0e0',\n  borderLight: '#eaeaea',\n  shadow: 'rgba(0,0,0,0.1)',\n  card: '#ffffff',\n  input: '#f8f8f8',\n  placeholder: '#999999',\n  error: '#ff4444',\n  success: '#00C851',\n  warning: '#ffbb33',\n  info: '#33b5e5',\n  primary: '#007AFF',\n  primaryLight: '#E3F2FD',\n  accent: '#FF6B6B',\n  overlay: 'rgba(0,0,0,0.5)',\n  codeBackground: '#F8F8F8',\n  selectedBackground: '#F5F5F5',\n  selectedBackgroundMac: '#ECECEC',\n  inputBackground: '#ffffff',\n  labelBackground: '#ffffff',\n  messageBackground: '#f2f2f2',\n  reasoningBackground: '#f3f3f3',\n  inputBorder: '#808080',\n  drawerBackground: 'transparent',\n  drawerBackgroundMac: '#F9F9F9',\n  promptButtonBackground: '#E8E8E8',\n  promptButtonBorder: '#E8E8E8',\n  promptText: '#333333',\n  promptSelectedBorder: '#000000',\n  promptAddButtonBackground: '#ffffff',\n  promptAddButtonBorder: '#666666',\n  promptAddText: '#666666',\n  promptDeleteBackground: '#666666',\n  promptDeleteText: '#ffffff',\n  promptScreenInputBorder: '#e0e0e0',\n  promptScreenSaveButton: '#007AFF',\n  promptScreenSaveButtonText: '#ffffff',\n  textDarkGray: '#333333',\n  inputToolbarBorder: '#000000',\n  fileListBackground: '#ffffff',\n  fileItemBorder: '#e0e0e0',\n  addButtonBackground: '#f0f0f0',\n  chatScreenSplit: '#c7c7c7'\n}\n</class>\n\n<class fqcn='react-native.src.types._module_.AllModel' file='react-native/src/types/Chat.ts'>\nexport type AllModel = {\n  textModel: Model[];\n  imageModel: Model[];\n};\n</class>\n\n<class fqcn='react-native.src.history.formatTimestampToYearMonth' file='react-native/src/history/HistoryGroupUtil.ts'>\nfunction formatTimestampToYearMonth(timestamp: number): string { ... }\n</class>\n\n<class fqcn='react-native.src.settings.CustomTextInput' file='react-native/src/settings/CustomTextInput.tsx'>\nconst CustomTextInput: React.FC<CustomTextInputProps> = ({\n  label,\n  value,\n  onChangeText,\n  placeholder,\n  secureTextEntry = false,\n  numberOfLines = 1\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.currentVoiceSystemPromptKey' file='react-native/src/storage/StorageUtils.ts'>\nconst currentVoiceSystemPromptKey = keyPrefix + 'currentVoiceSystemPromptKey'\n</class>\n\n<class fqcn='react-native.src.chat.component.createStyles' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.allModelKey' file='react-native/src/storage/StorageUtils.ts'>\nconst allModelKey = keyPrefix + 'allModelKey'\n</class>\n\n<class fqcn='react-native.src.prompt._module_.PROMPT_CATEGORIES' file='react-native/src/prompt/PresetPrompts.ts'>\nexport const PROMPT_CATEGORIES = [\n  'Profesional',\n  'Instansi', \n  'Asisten',\n]\n</class>\n\n<class fqcn='react-native.src.storage._module_.currentSessionIdKey' file='react-native/src/storage/StorageUtils.ts'>\nconst currentSessionIdKey = keyPrefix + 'currentSessionId'\n</class>\n\n<class fqcn='react-native.src.types.ModelTag' file='react-native/src/types/Chat.ts'>\nexport enum ModelTag {\n  Bedrock = 'Bedrock',\n  OpenAI = 'OpenAI',\n  OpenAICompatible = 'OpenAICompatible',\n  DeepSeek = 'DeepSeek',\n  Broperty = 'Broperty',\n  Ollama = 'Ollama'\n}\n</class>\n\n<class fqcn='react-native.src.settings.ModelPriceType' file='react-native/src/settings/ModelPrice.ts'>\ninterface ModelPriceType {\n  textModelPrices: Record<\n      string,\n      { inputTokenPrice: number; outputTokenPrice: number }\n    >\n  imageModelPrices: ImageModelPrices\n}\n</class>\n\n<class fqcn='react-native.src.settings.createStyles' file='react-native/src/settings/SettingsScreen.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.utils.getModelTagByUserName' file='react-native/src/utils/ModelUtils.ts'>\nexport function getModelTagByUserName(\n  modelTag: string | undefined,\n  userName: string\n): string { ... }\n</class>\n\n<class fqcn='react-native.src.chat.generateId' file='react-native/src/chat/ChatScreen.tsx'>\nconst generateId = () => { ... }\n</class>\n\n<class fqcn='react-native.src.theme.useTheme' file='react-native/src/theme/ThemeContext.tsx'>\nexport const useTheme = (): ThemeContextType => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.createStyles' file='react-native/src/chat/component/AudioWaveformComponent.tsx'>\nconst createStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.settings._module_.NavigationProp' file='react-native/src/settings/TokenUsageScreen.tsx'>\ntype NavigationProp = DrawerNavigationProp<RouteParamList>\n</class>\n\n<class fqcn='react-native.src.AppWithTheme' file='react-native/src/App.tsx'>\nconst AppWithTheme = () => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.useMarkdown' file='react-native/src/chat/component/markdown/useMarkdown.ts'>\nconst useMarkdown = (\n  value: string,\n  options?: useMarkdownHookOptions\n): ReactNode[] => { ... }\n</class>\n\n<class fqcn='react-native.src.api.isConfigured' file='react-native/src/api/bedrock-api.ts'>\nfunction isConfigured(): boolean { ... }\n</class>\n\n<class fqcn='react-native.src.storage.saveTextModel' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveTextModel(model: Model) { ... }\n</class>\n\n<class fqcn='react-native.src.theme._module_.ThemeContext' file='react-native/src/theme/ThemeContext.tsx'>\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined)\n</class>\n\n<class fqcn='react-native.src.api.isThinkingModel' file='react-native/src/api/bedrock-api.ts'>\nconst isThinkingModel = (): boolean => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getMergedModelOrder' file='react-native/src/storage/StorageUtils.ts'>\nexport function getMergedModelOrder(): Model[] { ... }\n</class>\n\n<class fqcn='react-native.src.settings.getTotalOutputPrice' file='react-native/src/settings/ModelPrice.ts'>\nexport function getTotalOutputPrice(usage: Usage[]) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomRenderActionsProps' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\ninterface CustomRenderActionsProps {\n  onFileSelected: (files: FileInfo[]) => void\n  mode?: 'default' | 'list'\n  chatMode?: ChatMode\n}\n</class>\n\n<class fqcn='react-native.src.storage.getAllModels' file='react-native/src/storage/StorageUtils.ts'>\nexport function getAllModels() { ... }\n</class>\n\n<class fqcn='react-native.src.chat.util._module_.MAX_NOVA_FILES' file='react-native/src/chat/util/FileUtils.ts'>\nconst MAX_NOVA_FILES = 5\n</class>\n\n<class fqcn='react-native.src.chat.util.ImageInfo' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nexport interface ImageInfo {\n  format: string\n  source: {\n      bytes: string;\n    }\n}\n</class>\n\n<class fqcn='react-native.src.storage.updateTotalUsage' file='react-native/src/storage/StorageUtils.ts'>\nexport function updateTotalUsage(usage: Usage) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.getFileNameWithoutExtension' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nconst getFileNameWithoutExtension = (fileName: string) => { ... }\n</class>\n\n<class fqcn='react-native.src.settings._module_.initUpgradeInfo' file='react-native/src/settings/SettingsScreen.tsx'>\nconst initUpgradeInfo: UpgradeInfo = {\n  needUpgrade: false,\n  version: '',\n  url: ''\n}\n</class>\n\n<class fqcn='react-native.src.prompt.HeaderLeftView' file='react-native/src/prompt/HeaderLeftView.tsx'>\nexport const HeaderLeftView = (navigation: NavigationProp, isDark: boolean) => { ... }\n</class>\n\n<class fqcn='react-native.src._module_.Stack' file='react-native/src/App.tsx'>\nconst Stack = createNativeStackNavigator()\n</class>\n\n<class fqcn='react-native.src.storage._module_.openAIProxyEnabledKey' file='react-native/src/storage/StorageUtils.ts'>\nconst openAIProxyEnabledKey = keyPrefix + 'openAIProxyEnabledKey'\n</class>\n\n<class fqcn='react-native.src.storage.getPromptId' file='react-native/src/storage/StorageUtils.ts'>\nexport function getPromptId() { ... }\n</class>\n\n<class fqcn='react-native.src.chat.util.getUniqueFileName' file='react-native/src/chat/util/FileUtils.ts'>\nconst getUniqueFileName = async (\n  basePath: string,\n  originalFileName: string\n): Promise<string> => { ... }\n</class>\n\n<class fqcn='react-native.src.types.SwiftChatUser' file='react-native/src/types/Chat.ts'>\ninterface SwiftChatUser {\n  _id: string | number\n  name?: string\n  avatar?: string\n  modelTag?: string\n}\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.customMarkedStyles' file='react-native/src/chat/component/CustomMessageComponent.tsx'>\nconst customMarkedStyles: MarkedStyles = {\n  table: { marginVertical: 4 },\n  li: { paddingVertical: 4 },\n  h1: { fontSize: 28 },\n  h2: { fontSize: 24 },\n  h3: { fontSize: 20 },\n  h4: { fontSize: 18 },\n  blockquote: { marginVertical: 8 },\n  paragraph: { paddingVertical: 6 }\n}\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.styles' file='react-native/src/chat/component/CustomScrollToBottomComponent.tsx'>\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n})\n</class>\n\n<class fqcn='react-native.src.chat.util.getFileBytes' file='react-native/src/chat/util/FileUtils.ts'>\nexport const getFileBytes = async (fileUrl: string) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.openInFileViewer' file='react-native/src/chat/component/CustomFileListComponent.tsx'>\nconst openInFileViewer = (url: string) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getSessionId' file='react-native/src/storage/StorageUtils.ts'>\nexport function getSessionId() { ... }\n</class>\n\n<class fqcn='react-native.src.settings.getTotalImagePrice' file='react-native/src/settings/ModelPrice.ts'>\nexport function getTotalImagePrice(usage: Usage[]) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.util.isValidFilename' file='react-native/src/chat/util/BedrockMessageConvertor.ts'>\nfunction isValidFilename(filename: string): boolean { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.getMathKey' file='react-native/src/chat/component/markdown/CustomMarkdownRenderer.tsx'>\nfunction getMathKey() { ... }\n</class>\n\n<class fqcn='react-native.src.settings.DropdownItem' file='react-native/src/settings/DropdownComponent.tsx'>\ninterface DropdownItem {\n  label: string\n  value: string\n}\n</class>\n\n<class fqcn='react-native.src.storage.getOpenAIProxyEnabled' file='react-native/src/storage/StorageUtils.ts'>\nexport function getOpenAIProxyEnabled() { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.isAndroid' file='react-native/src/chat/component/EmptyChatComponent.tsx'>\nconst isAndroid = Platform.OS === 'android'\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.createCustomStyles' file='react-native/src/chat/component/markdown/CustomMarkdownRenderer.tsx'>\nconst createCustomStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.settings.CustomTextInputProps' file='react-native/src/settings/CustomTextInput.tsx'>\ninterface CustomTextInputProps {\n  label: string\n  value: string\n  onChangeText: (text: string) => void\n  placeholder: string\n  secureTextEntry?: boolean\n  numberOfLines?: number\n}\n</class>\n\n<class fqcn='react-native.src.settings.CustomDropdownProps' file='react-native/src/settings/DropdownComponent.tsx'>\ninterface CustomDropdownProps {\n  label: string\n  data: DropdownItem[]\n  value: string | null\n  onChange: (item: DropdownItem) => void\n  placeholder: string\n  searchPlaceholder?: string\n}\n</class>\n\n<class fqcn='react-native.src.chat.util.saveFile' file='react-native/src/chat/util/FileUtils.ts'>\nexport const saveFile = async (sourceUrl: string, fileName: string) => { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.apiUrlKey' file='react-native/src/storage/StorageUtils.ts'>\nconst apiUrlKey = keyPrefix + 'apiUrlKey'\n</class>\n\n<class fqcn='react-native.src.prompt._module_.NavigationProp' file='react-native/src/prompt/HeaderLeftView.tsx'>\ntype NavigationProp = DrawerNavigationProp<RouteParamList>\n</class>\n\n<class fqcn='react-native.src.api._module_.CallbackFunction' file='react-native/src/api/open-api.ts'>\ntype CallbackFunction = (\n  result: string,\n  complete: boolean,\n  needStop: boolean,\n  usage?: Usage\n) => void;\n</class>\n\n<class fqcn='react-native.src.chat.component.getStyles' file='react-native/src/chat/component/CustomFileListComponent.tsx'>\nconst getStyles = (colors: ColorScheme) => { ... }\n</class>\n\n<class fqcn='react-native.src.settings.getTotalCost' file='react-native/src/settings/ModelPrice.ts'>\nexport function getTotalCost(usage: Usage[]) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.EmptyChatComponent' file='react-native/src/chat/component/EmptyChatComponent.tsx'>\nexport const EmptyChatComponent = ({\n  chatMode,\n  isLoadingMessages = false\n}: EmptyChatComponentProps): React.ReactElement => { ... }\n</class>\n\n<class fqcn='react-native.src.types.Delta' file='react-native/src/types/Chat.ts'>\nexport interface Delta {\n  text: string\n  reasoningContent: ReasoningContent\n}\n</class>\n\n<class fqcn='react-native.src.storage.getModelOrder' file='react-native/src/storage/StorageUtils.ts'>\nexport function getModelOrder(): Model[] { ... }\n</class>\n\n<class fqcn='react-native.src.types.BedrockChunk' file='react-native/src/types/Chat.ts'>\nexport interface BedrockChunk {\n  contentBlockDelta: {\n      delta: Delta;\n    }\n  metadata: {\n      usage: Usage;\n    }\n  detail: string\n}\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown._module_.styles' file='react-native/src/chat/component/markdown/CustomCodeHighlighter.tsx'>\nconst styles = StyleSheet.create({\n  inputText: {\n    lineHeight: 20,\n    marginTop: -5\n  }\n})\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.MAX_FILE_SIZE' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nconst MAX_FILE_SIZE = 4.5 * 1024 * 1024\n</class>\n\n<class fqcn='react-native.src.storage._module_.currentPromptIdKey' file='react-native/src/storage/StorageUtils.ts'>\nconst currentPromptIdKey = keyPrefix + 'currentPromptIdKey'\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomMessageComponent' file='react-native/src/chat/component/CustomMessageComponent.tsx'>\nconst CustomMessageComponent: React.FC<CustomMessageProps> = ({\n  currentMessage,\n  chatStatus,\n  isLastAIMessage,\n  onRegenerate\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.CustomChatFooter' file='react-native/src/chat/component/CustomChatFooter.tsx'>\nexport const CustomChatFooter: React.FC<CustomComposerProps> = ({\n  files,\n  onFileUpdated,\n  onSystemPromptUpdated,\n  onSwitchedToTextModel,\n  chatMode,\n  isShowSystemPrompt\n}) => { ... }\n</class>\n\n<class fqcn='react-native.src.types._module_.Model' file='react-native/src/types/Chat.ts'>\nexport type Model = {\n  modelId: string;\n  modelName: string;\n  modelTag?: string;\n};\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.SCREEN_WIDTH' file='react-native/src/chat/component/ModelSelectionModal.tsx'>\nconst SCREEN_WIDTH = Dimensions.get('window').width\n</class>\n\n<class fqcn='react-native.src.storage.saveImageSize' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveImageSize(size: string) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.util.showInfo' file='react-native/src/chat/util/ToastUtils.ts'>\nexport const showInfo = (msg: string) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.cleanStyle' file='react-native/src/chat/component/markdown/CustomCodeHighlighter.tsx'>\nconst cleanStyle = (style: CSSProperties) => { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.MAX_VIDEO_SIZE' file='react-native/src/chat/component/CustomFileListComponent.tsx'>\nconst MAX_VIDEO_SIZE = 8\n</class>\n\n<class fqcn='react-native.src.chat.component.markdown.CopyButtonProps' file='react-native/src/chat/component/markdown/CustomMarkdownRenderer.tsx'>\ninterface CopyButtonProps {\n  onCopy: () => void\n  colors: ColorScheme\n  isDark: boolean\n}\n</class>\n\n<class fqcn='react-native.src.prompt.calculateTextLength' file='react-native/src/prompt/PromptScreen.tsx'>\nfunction calculateTextLength(str: string) { ... }\n</class>\n\n<class fqcn='react-native.src.storage.getOpenAICompatApiURL' file='react-native/src/storage/StorageUtils.ts'>\nexport function getOpenAICompatApiURL(): string { ... }\n</class>\n\n<class fqcn='react-native.src.types.DropdownItem' file='react-native/src/types/Chat.ts'>\nexport interface DropdownItem {\n  label: string\n  value: string\n}\n</class>\n\n<class fqcn='react-native.src.storage.getHapticEnabled' file='react-native/src/storage/StorageUtils.ts'>\nexport function getHapticEnabled() { ... }\n</class>\n\n<class fqcn='react-native.src.chat._module_.currentMode' file='react-native/src/chat/ChatScreen.tsx'>\nlet currentMode = ChatMode.Text\n</class>\n\n<class fqcn='react-native.src.storage._module_.storage' file='react-native/src/storage/StorageUtils.ts'>\nexport const storage = new MMKV()\n</class>\n\n<class fqcn='react-native.src.types._module_.ImageRes' file='react-native/src/types/Chat.ts'>\nexport type ImageRes = {\n  image: string;\n  error: string;\n};\n</class>\n\n<class fqcn='react-native.src.storage.saveHapticEnabled' file='react-native/src/storage/StorageUtils.ts'>\nexport function saveHapticEnabled(enabled: boolean) { ... }\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.DOCUMENT_FORMATS' file='react-native/src/chat/component/CustomAddFileComponent.tsx'>\nexport const DOCUMENT_FORMATS = [\n  'pdf',\n  'csv',\n  'doc',\n  'docx',\n  'xls',\n  'xlsx',\n  'html',\n  'txt',\n  'md',\n  ...EXTRA_DOCUMENT_FORMATS,\n]\n</class>\n\n<class fqcn='react-native.src.chat._module_.BOT_ID' file='react-native/src/chat/ChatScreen.tsx'>\nconst BOT_ID = 2\n</class>\n\n<class fqcn='react-native.src.chat.util.getFileTextContent' file='react-native/src/chat/util/FileUtils.ts'>\nexport const getFileTextContent = async (fileUrl: string): Promise<string> => { ... }\n</class>\n\n<class fqcn='react-native.src.types.ChatMode' file='react-native/src/types/Chat.ts'>\nexport enum ChatMode {\n  Text = 'Text',\n  Image = 'Image'\n}\n</class>\n\n<class fqcn='react-native.src.chat.component._module_.styles' file='react-native/src/chat/component/CustomScrollToBottomComponent.tsx'>\nconst styles = StyleSheet.create({\n  containerStyle: {\n    height: 44,\n    width: 44,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 0,\n    marginRight: 6,\n    marginLeft: 10\n  },\n  listContainerStyle: {\n    height: 44,\n    width: 44,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 0,\n    marginRight: 6,\n    marginLeft: 10\n  },\n  imageButton: {\n    width: 26,\n    height: 26\n  },\n  addIcon: {\n    fontSize: 24,\n    color: '#666'\n  }\n})\n</class>\n\n<class fqcn='react-native.src.api.getProxyRequestURL' file='react-native/src/api/open-api.ts'>\nfunction getProxyRequestURL(): string { ... }\n</class>\n\n<class fqcn='react-native.src.storage._module_.openAICompatApiKeyTag' file='react-native/src/storage/StorageUtils.ts'>\nconst openAICompatApiKeyTag = keyPrefix + 'openAICompatApiKeyTag'\n</class>\n\n<class fqcn='react-native.src.types.ChatStatus' file='react-native/src/types/Chat.ts'>\nexport enum ChatStatus {\n  Init = 'Init',\n  Running = 'Running',\n  Complete = 'Complete'\n}\n</class>\n</available_summaries>\n\n\n<goal>\nFind all main programs, executables, or entry points in this project that might need debugging\n</goal>\nIdentify code context relevant to the goal by calling `recommendContext`.\n\nBefore calling `recommendContext`, reason step-by-step:\n- Identify all class names explicitly mentioned in the <goal>.\n- Identify all class types used in the <workspace> code.\n- Think about how you would solve the <goal>, and identify additional classes relevant to your plan.\n  For example, if the plan involves instantiating class Foo, or calling a method of class Bar,\n  then Foo and Bar are relevant classes.\n- Compare this combined list against the classes in <available_summaries>.\n\nThen call the `recommendContext` tool with the appropriate entries:\n\nPopulate the `filesToAdd` argument with the full (relative) paths of files that will need to be edited as part of the goal,\nor whose implementation details are necessary. Put these files in `filesToAdd` (even if you are only shown a summary).\n\nPopulate the `classesToSummarize` argument with the fully-qualified names of classes whose APIs will be used.\n\nEither or both of `filesToAdd` and `classesToSummarize` may be empty.\n"
    } ]
  } ],
  "parameters" : {
    "modelName" : null,
    "temperature" : null,
    "topP" : null,
    "frequencyPenalty" : null,
    "presencePenalty" : null,
    "maxOutputTokens" : null,
    "stopSequences" : [ ],
    "toolSpecifications" : [ {
      "name" : "recommendContext",
      "description" : "Recommend relevant files and classes needed to achieve the user's goal.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "filesToAdd" : {
            "description" : "List of full paths of files to edit or whose full text is necessary.",
            "items" : {
              "description" : null
            }
          },
          "classesToSummarize" : {
            "description" : "List of fully-qualified class names for classes whose APIs are relevant to the goal but which do not need to be edited.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "filesToAdd", "classesToSummarize" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    } ],
    "toolChoice" : "REQUIRED",
    "responseFormat" : null,
    "maxCompletionTokens" : null,
    "logitBias" : { },
    "parallelToolCalls" : true,
    "seed" : null,
    "user" : null,
    "store" : null,
    "metadata" : {
      "tags" : "retain"
    },
    "serviceTier" : null,
    "reasoningEffort" : null
  }
}