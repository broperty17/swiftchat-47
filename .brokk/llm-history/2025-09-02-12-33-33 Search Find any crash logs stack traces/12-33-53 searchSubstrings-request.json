{
  "messages" : [ {
    "text" : "You are the Search Agent.\nYour job:\n  - find and organize code relevant to the user's question or implementation goal,\n  - aggressively curate the Workspace so a Code Agent can implement next without confusion,\n  - never write code yourself.\n\nCritical rules:\n  1) At EVERY TURN, drop irrelevant fragments from the Workspace.\n     Prefer summaries over full files. Replace long fragments with concise summaries of content related to the goal first,\n     then drop the originals.\n  2) Use search and inspection tools to discover relevant code, including classes/methods/usages/call graphs.\n  3) The symbol-based tools only have visibility into the following file types: TYPESCRIPT\n     Use text-based tools if you need to search other file types.\n  4) Group related lookups into a single call when possible.\n  5) Make multiple tool calls at once when searching for different types of code.\n\nOutput discipline:\n  - Think before calling tools.\n  - If you already know what to add, use Workspace tools directly; do not search redundantly.\n"
  }, {
    "name" : null,
    "contents" : [ {
      "text" : "<workspace>\n<workspace_readonly>\nHere are the READ ONLY files and code fragments in your Workspace.\nDo not edit this code! Images will be included separately if present.\n\n<summary targets=\"server/src/image_nl_processor.py, server/src/main.py\" type=\"FILE_SKELETONS\" fragmentid=\"5\">\nNo summaries found for: server/src/image_nl_processor.py, server/src/main.py\n</summary>\n\n\n<summary targets=\"react-native.src.chat.component.EmptyChatComponentProps, react-native.src.api._module_.ChatResponse, react-native.src.chat.util.getBedrockMessagesFromChatMessages, react-native.src.storage.saveDeepSeekApiKey, react-native.src.chat.component._module_.styles, react-native.src.types.SystemPrompt, react-native.src.chat.component.markdown._module_.CopyButton, react-native.src.chat.component.CustomSendComponent, react-native.src.storage.deleteMessagesBySessionId, react-native.src.chat.component.markdown.Parser, react-native.src.storage.getCurrentSystemPrompt, react-native.src.settings.SettingsScreen, react-native.src.chat.util._module_.hapticFeedbackEnabled, react-native.src.chat.component.isModelSupportUploadImages, react-native.src.storage.saveCurrentVoiceSystemPrompt, react-native.src.storage.updateChatTitlesFromUserMessages, react-native.src.storage._module_.tokenInfoKey, react-native.src.chat.component.getFileType, react-native.src.chat.component._module_.NavigationProp, react-native.src.api.requestUpgradeInfo, react-native.src.api.getOllamaMessages, react-native.src.chat.component.ImageSpinnerProps, react-native.src.storage.getDefaultImageModels, react-native.src.chat.component.CustomSendComponentProps, react-native.src.storage.saveRegion, react-native.src.prompt._module_.PromptScreenRouteProp, react-native.src.api.invokeOpenAIWithCallBack, react-native.src.chat.component.CustomComposerProps, react-native.src.chat.component.createStyles, react-native.src.storage.getDefaultTextModels, react-native.src.settings.addBedrockPrefixToDeepseekModels, react-native.src.storage._module_.GPTModels, react-native.src.storage.getMessagesBySessionId, react-native.src.api.extractChunkContent, react-native.src.chat.component.ModelSelectionModal, react-native.src.chat.ChatScreen, react-native.src.storage.getOllamaApiUrl, react-native.src.chat.util._module_.MAX_IMAGES, react-native.src.storage.saveAllSystemPrompts, react-native.src.chat._module_.textPlaceholder, react-native.src.storage.saveOpenAICompatModels, react-native.src.chat.component.markdown._module_.CustomCodeHighlighter, react-native.src.storage.updateMessageList, react-native.src.storage._module_.apiKeyTag, react-native.src.chat.component._module_.EXTRA_DOCUMENT_FORMATS, react-native.src.settings.getImagePrice, react-native.src.storage._module_.DefaultTextModel, react-native.src.settings.CustomDropdown, react-native.src.storage._module_.DefaultImageModel, react-native.src.settings.createStyles, react-native.src.theme.ThemeProviderProps, react-native.src.chat.component.ModelIconButton, react-native.src.api.requestAllModels, react-native.src.storage._module_.thinkingEnabledKey, react-native.src.chat.util.ImageContent, react-native.src.chat.component.ModelIconButtonProps, react-native.src.storage.saveImageModel, react-native.src.storage.saveApiKey, react-native.src.settings.TabButton, react-native.src.storage._module_.sessionIdPrefix, react-native.src.history.groupMessagesByDate, react-native.src.utils._module_.isAndroid, react-native.src.storage.getSystemPrompts, react-native.src.chat.createStyles, react-native.src.storage._module_.messageListKey, react-native.src.api.isEnableThinking, react-native.src.api.genImage, react-native.src.chat.component.HeaderTitleProps, react-native.src.storage.getApiUrl, react-native.src.storage.saveThinkingEnabled, react-native.src.types.Metrics, react-native.src.storage._module_.openAICompatModelsKey, react-native.src.storage._module_.systemPromptsKey, react-native.src.chat.component.ModelSelectionModalProps, react-native.src.chat.component.markdown._module_.ALLOWED_STYLE_PROPERTIES, react-native.src.api.parseStreamData, react-native.src.storage.saveKeys, react-native.src.chat.component.markdown.getTableWidthArr, react-native.src.storage.getCurrentVoiceSystemPrompt, react-native.src.storage.saveOllamaApiURL, react-native.src.history.AppProviderProps, react-native.src.chat.util.getFileTypeSummary, react-native.src.chat.service._module_.voiceChatEmitter, react-native.src.api.getApiKey, react-native.src.types._module_.Usage, react-native.src.prompt.PresetPromptListProps, react-native.src.api.invokeBedrockWithCallBack, react-native.src.chat.component.markdown.useMarkdownHookOptions, react-native.src.types._module_.OllamaModel, react-native.src.theme.ThemeProvider, react-native.src.chat.component.CustomAddFileComponent, react-native.src.history._module_.AppContext, react-native.src.storage.getMessageList, react-native.src.api.requestAllOllamaModels, react-native.src.storage.getThinkingEnabled, react-native.src.storage._module_.ollamaApiUrlKey, react-native.src.utils._module_.isMacCatalyst, react-native.src.settings.getUsagePrice, react-native.src.chat.component.markdown._module_.MemoizedCodeHighlighter, react-native.src.storage.saveOpenAIApiKey, react-native.src.storage._module_.DefaultVoiceSystemPrompts, react-native.src.chat.component._module_.CustomHeaderRightButton, react-native.src.storage.saveVoiceId, react-native.src.storage._module_.textModelKey, react-native.src.chat.util.saveImageToLocal, react-native.src.types._module_.UsagePrice, react-native.src.settings._module_.ModelPrice, react-native.src.chat.component._module_.AnimatedCircle, react-native.src.chat.component.markdown.CustomMarkdownRenderer, react-native.src.chat.component.markdown._module_.ChatMarkdownProps, react-native.src.chat.component.markdown._module_.HighlighterStyleSheet, react-native.src.api.requestToken, react-native.src.chat.component.CustomScrollToBottomComponent, react-native.src.settings.getTotalInputPrice, react-native.src.storage.getImageModel, react-native.src.utils.getModelTag, react-native.src.storage.saveOpenAICompatApiKey, react-native.src.chat._module_.imagePlaceholder, react-native.src.chat.component.CircularProgress, react-native.src.chat.component.ListIcon, react-native.src.chat.util.setHapticFeedbackEnabled, react-native.src.chat.component.CustomMessageProps, react-native.src.types._module_.TokenResponse, react-native.src.history.useAppContext, react-native.src.storage.saveModelOrder, react-native.src.storage.getOpenAICompatApiKey, react-native.src.storage._module_.hapticEnabledKey, react-native.src.chat.service._module_.voiceChatService, react-native.src.storage._module_.DefaultRegion, react-native.src.storage.getAllImageSize, react-native.src.api.getApiPrefix, react-native.src.history._module_.DrawerType, react-native.src.prompt._module_.styles, react-native.src.chat.component.markdown.getRNStylesFromHljsStyle, react-native.src.utils.getModelIcon, react-native.src.chat.component.markdown.Markdown, react-native.src.storage.getDeepSeekApiKey, react-native.src.chat.component.isVideoFormat, react-native.src.storage.getOpenAIApiKey, react-native.src.settings._module_.GITHUB_LINK, react-native.src.storage.saveSystemPrompts, react-native.src.chat.component.HeaderRightButtonProps, react-native.src.storage._module_.VoiceIDList, react-native.src.history.getTodayTimestamp, react-native.src.chat.util._module_.OpenAIMessage, react-native.src.prompt._module_.RootStackParamList, react-native.src.types._module_.RouteParamList, react-native.src.storage.getRegion, react-native.src.chat.component.markdown.CodeHighlighterProps, react-native.src.storage.updateTextModelUsageOrder, react-native.src.storage.getAllRegions, react-native.src.chat.component.CustomFileProps, react-native.src.chat.util._module_.MessageContent, react-native.src.prompt.PresetPrompt, react-native.src.prompt._module_.MAX_NAME_LENGTH, react-native.src.chat.service.VoiceChatService, react-native.src.types._module_.DrawerParamList, react-native.src.chat.util.getFullFileUrl, react-native.src.chat.util._module_.MAX_NOVA_VIDEOS, react-native.src.chat.component.ImageProgressBar, react-native.src.history.getFirstDayOfMonthTimestamp, react-native.src.types.FileType, react-native.src.chat.component.markdown.CustomTokenizer, react-native.src.api.isOpenRouterRequest, react-native.src.storage._module_.RegionList, react-native.src.storage.getTextModel, react-native.src.chat.component.isDocumentFormat, react-native.src.types.PressMode, react-native.src.chat.component.PromptListProps, react-native.src.chat.component._module_.minWidth, react-native.src.chat.util.trigger, react-native.src.storage.getMessageListStr, react-native.src.api.invokeOllamaWithCallBack, react-native.src.storage.saveAllModels, react-native.src.storage._module_.currentSystemPromptKey, react-native.src.settings.getTotalOutputTokens, react-native.src.storage._module_.voiceIdKey, react-native.src.storage.getDefaultApiKeyModels, react-native.src.history.CustomDrawerContent, react-native.src.chat.component.markdown._module_.MemoizedText, react-native.src.chat.component._module_.AnimatedImage, react-native.src.storage.getTokenInfo, react-native.src.types._module_.UpgradeInfo, react-native.src.storage._module_.openAICompatApiURLKey, react-native.src.chat.component.isImageFormat, react-native.src.chat.component.ImageSpinner, react-native.src.history.AppContextType, react-native.src.storage.getModelUsage, react-native.src.types.SwiftChatMessage, react-native.src.api._module_.isDev, react-native.src.storage._module_.modelUsageKey, react-native.src.chat.util._module_.BedrockMessage, react-native.src.chat.component._module_.VIDEO_FORMATS, react-native.src.chat.util.DocumentContent, react-native.src.prompt.createStyles, react-native.src.theme.ThemeContextType, react-native.src.chat._module_.ChatScreenRouteProp, react-native.src.chat.component.CustomFileListComponent, react-native.src.chat.component.AudioWaveformRef, react-native.src.chat.util.TextContent, react-native.src.chat.component._module_.MODAL_HEIGHT, react-native.src.api._module_.OllamaResponse, react-native.src.api._module_.CallbackFunction, react-native.src.prompt._module_.PresetPromptListNavigationProp, react-native.src.theme._module_.lightColors, react-native.src.history.createStyles, react-native.src.types._module_.AllModel, react-native.src.settings.TabButtonProps, react-native.src.settings.CustomTextInput, react-native.src.settings._module_.ImageModelPrices, react-native.src.history.formatTimestampToYearMonth, react-native.src.storage._module_.currentVoiceSystemPromptKey, react-native.src.storage._module_.imageSizeKey, react-native.src.chat.util.normalizeFilename, react-native.src.settings.getTotalImageCount, react-native.src.storage._module_.allModelKey, react-native.src.prompt._module_.PROMPT_CATEGORIES, react-native.src.storage._module_.currentSessionIdKey, react-native.src.types.ModelTag, react-native.src.settings.ModelPriceType, react-native.src.prompt.PromptScreen, react-native.src.storage.saveMessages, react-native.src.chat.generateId, react-native.src.utils.getModelTagByUserName, react-native.src.storage.initializeStorage, react-native.src.theme.useTheme, react-native.src.prompt._module_.PRESET_PROMPTS, react-native.src.chat.util.VideoContent, react-native.src.storage._module_.HARDCODED_DEEPSEEK_API_KEY, react-native.src.types.ReasoningContent, react-native.src.chat.util.getBedrockMessage, react-native.src.settings._module_.NavigationProp, react-native.src.theme.ColorScheme, react-native.src.chat.component.markdown._module_.ReactStyle, react-native.src.chat.component.markdown.useMarkdown, react-native.src.storage.saveTextModel, react-native.src.api.isConfigured, react-native.src.theme._module_.ThemeContext, react-native.src.api.isThinkingModel, react-native.src.storage.getMergedModelOrder, react-native.src.storage.saveOpenAIProxyEnabled, react-native.src.prompt.PresetPromptList, react-native.src.settings.getTotalOutputPrice, react-native.src.chat.component.CustomRenderActionsProps, react-native.src.chat.component.HeaderTitle, react-native.src.storage.getAllModels, react-native.src.chat.util._module_.MAX_NOVA_FILES, react-native.src.chat.util.ImageInfo, react-native.src.storage.updateTotalUsage, react-native.src.storage.getImageSize, react-native.src.chat.component.markdown.CustomCodeHighlighter, react-native.src.chat.component.getFileNameWithoutExtension, react-native.src.settings._module_.initUpgradeInfo, react-native.src.storage.saveMessageList, react-native.src.storage.saveTokenInfo, react-native.src.storage.saveApiUrl, react-native.src.prompt.HeaderLeftView, react-native.src.api._module_.OpenRouterTag, react-native.src.types.EventData, react-native.src.api.getApiURL, react-native.src.types._module_.Chat, react-native.src.prompt._module_.NavigationProp, react-native.src.chat.util.isAllFileReady, react-native.src.storage._module_.openAIProxyEnabledKey, react-native.src.storage.getPromptId, react-native.src.api.getOpenAIMessages, react-native.src.settings.getTotalInputTokens, react-native.src.storage._module_.BedrockVoiceModels, react-native.src.chat.util.getUniqueFileName, react-native.src.types.SwiftChatUser, react-native.src.chat.component._module_.customMarkedStyles, react-native.src.storage.saveCurrentSystemPrompt, react-native.src.chat.component.openInFileViewer, react-native.src.chat.util.getFileBytes, react-native.src.storage.saveOpenAICompatApiURL, react-native.src.storage.getSessionId, react-native.src.chat.util.isNova, react-native.src.settings.getTotalImagePrice, react-native.src.storage._module_.encryptStorage, react-native.src.storage._module_.keyPrefix, react-native.src.chat.util.isValidFilename, react-native.src.chat.component.markdown.getMathKey, react-native.src.chat.component.getFiles, react-native.src.chat.util._module_.hapticOptions, react-native.src.chat.createBotMessage, react-native.src.storage._module_.imageModelKey, react-native.src.storage._module_.DefaultSystemPrompts, react-native.src.chat.component.DefaultIcon, react-native.src.storage.getApiKey, react-native.src.storage.getOpenAIProxyEnabled, react-native.src.settings.DropdownItem, react-native.src.chat.component.markdown._module_.mathViewIndex, react-native.src.theme._module_.darkColors, react-native.src.storage.isNovaCanvas, react-native.src.storage.getDefaultSystemPrompts, react-native.src.storage._module_.BedrockThinkingModels, react-native.src.chat.component._module_.isAndroid, react-native.src.settings.CustomDropdownProps, react-native.src.settings.CustomTextInputProps, react-native.src.chat.component.markdown.createCustomStyles, react-native.src.chat.util.saveFile, react-native.src.chat.component._module_.IMAGE_FORMATS, react-native.src.storage._module_.apiUrlKey, react-native.src.storage._module_.modelOrderKey, react-native.src.chat.component.ProgressCircle, react-native.src.chat.component.getStyles, react-native.src.settings.getTotalCost, react-native.src.chat.component.EmptyChatComponent, react-native.src.types.Delta, react-native.src.types._module_.FileInfo, react-native.src.storage.getModelOrder, react-native.src.types.BedrockChunk, react-native.src.storage.isTokenValid, react-native.src.api.parseChunk, react-native.src.storage._module_.regionKey, react-native.src.chat.component.markdown._module_.styles, react-native.src.chat.util.checkFileNumberLimit, react-native.src.storage.getOpenAICompatModels, react-native.src.storage._module_.DefaultVoicePrompt, react-native.src.storage._module_.deepSeekApiKeyTag, react-native.src.chat.component._module_.MAX_FILE_SIZE, react-native.src.storage._module_.DeepSeekModels, react-native.src.chat.component.DisplayMode, react-native.src.chat.component._module_.AudioWaveformComponent, react-native.src.storage._module_.currentPromptIdKey, react-native.src.chat.component.CustomMessageComponent, react-native.src.chat.component.CustomChatFooter, react-native.src.storage._module_.openAIApiKeyTag, react-native.src.chat.component._module_.isPad, react-native.src.settings.TokenUsageScreen, react-native.src.types._module_.Model, react-native.src.chat.component._module_.SCREEN_WIDTH, react-native.src.storage.saveImageSize, react-native.src.chat.util.showInfo, react-native.src.storage.isNewStabilityImageModel, react-native.src.chat.component.markdown.cleanStyle, react-native.src.storage.getVoiceId, react-native.src.chat.component._module_.MAX_VIDEO_SIZE, react-native.src.chat.component.isVideoSupported, react-native.src.chat.component.markdown.CopyButtonProps, react-native.src.prompt.calculateTextLength, react-native.src.chat.util._module_.MAX_DOCUMENTS, react-native.src.storage.savePromptId, react-native.src.storage.getOpenAICompatApiURL, react-native.src.types.DropdownItem, react-native.src.storage.getHapticEnabled, react-native.src.history.AppProvider, react-native.src.chat._module_.currentMode, react-native.src.storage._module_.storage, react-native.src.types._module_.ImageRes, react-native.src.storage.saveHapticEnabled, react-native.src.chat.component._module_.DOCUMENT_FORMATS, react-native.src.chat._module_.BOT_ID, react-native.src.chat.util.getFileTextContent, react-native.src.types.ChatMode, react-native.src.chat.component.PromptListComponent, react-native.src.storage._module_.openAICompatApiKeyTag, react-native.src.types.ChatStatus, react-native.src.api.getProxyRequestURL\" type=\"CODEUNIT_SKELETON\" fragmentid=\"1156\">\npackage react-native.src.api;\n\ntype ChatResponse = {\n  choices: Array<{\n    delta: {\n      content: string;\n      reasoning_content: string;\n      reasoning: string;\n    };\n  }>;\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n    prompt_cache_hit_tokens: number;\n  };\n  error?: {\n    message?: string;\n    metadata?: {\n      raw?: string;\n    };\n  };\n  detail?: string;\n};\n\nexport const requestUpgradeInfo = async (\n  os: string,\n  version: string\n): Promise<UpgradeInfo> => { ... }\n\nfunction getOllamaMessages(\n  messages: BedrockMessage[],\n  prompt: SystemPrompt | null\n): OpenAIMessage[] { ... }\n\nexport const invokeOpenAIWithCallBack = async (\n  messages: BedrockMessage[],\n  prompt: SystemPrompt | null,\n  shouldStop: () => boolean,\n  controller: AbortController,\n  callback: CallbackFunction\n) => { ... }\n\nfunction extractChunkContent(bedrockChunk: BedrockChunk, rawChunk: string) { ... }\n\nexport const requestAllModels = async (): Promise<AllModel> => { ... }\n\nconst isEnableThinking = (): boolean => { ... }\n\nexport const genImage = async (\n  imagePrompt: string,\n  controller: AbortController,\n  image?: ImageInfo\n): Promise<ImageRes> => { ... }\n\nfunction getApiKey(): string { ... }\n\nexport const invokeBedrockWithCallBack = async (\n  messages: BedrockMessage[],\n  chatMode: ChatMode,\n  prompt: SystemPrompt | null,\n  shouldStop: () => boolean,\n  controller: AbortController,\n  callback: CallbackFunction\n) => { ... }\n\nexport const requestAllOllamaModels = async (): Promise<Model[]> => { ... }\n\nexport const requestToken = async (): Promise<TokenResponse | null> => { ... }\n\nfunction getApiPrefix(): string { ... }\n\nfunction isOpenRouterRequest(): boolean { ... }\n\nexport const invokeOllamaWithCallBack = async (\n  messages: BedrockMessage[],\n  prompt: SystemPrompt | null,\n  shouldStop: () => boolean,\n  controller: AbortController,\n  callback: CallbackFunction\n) => { ... }\n\nexport const isDev = false\n\ntype OllamaResponse = {\n  model: string;\n  created_at: string;\n  message?: {\n    role: string;\n    content: string;\n  };\n  done: boolean;\n  prompt_eval_count: number;\n  eval_count: number;\n};\n\nfunction isConfigured(): boolean { ... }\n\nconst isThinkingModel = (): boolean => { ... }\n\nconst OpenRouterTag = ': OPENROUTER PROCESSING'\n\nfunction getApiURL(): string { ... }\n\nconst parseStreamData = (chunk: string, lastChunk: string = '') => { ... }\n\nfunction getOpenAIMessages(\n  messages: BedrockMessage[],\n  prompt: SystemPrompt | null\n): OpenAIMessage[] { ... }\n\ntype CallbackFunction = (\n  result: string,\n  complete: boolean,\n  needStop: boolean,\n  usage?: Usage,\n  reasoning?: string\n) => void;\n\nfunction parseChunk(rawChunk: string) { ... }\n\nfunction getProxyRequestURL(): string { ... }\n\npackage react-native.src.chat;\n\nfunction ChatScreen(): React.JSX.Element { ... }\n\nconst textPlaceholder = '...'\n\nconst createStyles = (colors: ColorScheme) => { ... }\n\nconst imagePlaceholder = '![](bedrock://imgProgress)'\n\ntype ChatScreenRouteProp = RouteProp<DrawerParamList, 'Bedrock'>\n\nconst generateId = () => { ... }\n\nconst createBotMessage = (mode: string, currentSystemPrompt?: SystemPrompt | null) => { ... }\n\nlet currentMode = ChatMode.Text\n\nconst BOT_ID = 2\n\npackage react-native.src.chat.component;\n\ninterface EmptyChatComponentProps {\n  chatMode: ChatMode\n  isLoadingMessages?: boolean\n}\n\nconst CustomSendComponent: React.FC<CustomSendComponentProps> = ({\n  chatStatus,\n  chatMode,\n  selectedFiles,\n  isShowLoading: isShowLoading = false,\n  onStopPress,\n  onFileSelected,\n  onVoiceChatToggle,\n  ...props\n}) => { ... }\n\nconst isModelSupportUploadImages = (chatMode: ChatMode): boolean => { ... }\n\nexport const getFileType = (format: string) => { ... }\n\ninterface ImageSpinnerProps {\n  size?: number\n  source: ImageSourcePropType\n  visible: boolean\n  isRotate?: boolean\n}\n\ninterface CustomSendComponentProps extends SendProps<SwiftChatMessage> {\n  chatStatus: ChatStatus\n  chatMode: ChatMode\n  selectedFiles: FileInfo[]\n  isShowLoading?: boolean\n  onStopPress: () => void\n  onFileSelected: (files: FileInfo[]) => void\n  onVoiceChatToggle?: () => void\n}\n\ninterface CustomComposerProps {\n  files: FileInfo[]\n  onFileUpdated: (files: FileInfo[], isUpdate?: boolean) => void\n  onSystemPromptUpdated: (prompt: SystemPrompt | null) => void\n  onSwitchedToTextModel: () => void\n  chatMode: ChatMode\n  isShowSystemPrompt: boolean\n}\n\nconst createStyles = (colors: ColorScheme) => { ... }\n\nexport const ModelSelectionModal: React.FC<ModelSelectionModalProps> = ({\n  visible,\n  onClose,\n  iconPosition = {\n    x: SCREEN_WIDTH - 50,\n    y: 70\n  }\n}) => { ... }\n\nexport const EXTRA_DOCUMENT_FORMATS = [\n  'json',\n  'py',\n  'ts',\n  'tsx',\n  'js',\n  'kt',\n  'java',\n  'swift',\n  'c',\n  'm',\n  'h',\n  'sh',\n  'cpp',\n  'rs',\n  'go',\n  'class',\n  'cs',\n  'php',\n  'rb',\n  'dart',\n  'sql',\n  'css',\n  'xml',\n  'yaml',\n]\n\nexport const ModelIconButton: React.FC<ModelIconButtonProps> = ({\n  onPress\n}) => { ... }\n\ninterface ModelIconButtonProps {\n  onPress: () => void\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 90\n  },\n  promptContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1\n  }\n})\n\ninterface HeaderTitleProps {\n  title: string\n  usage?: Usage\n  onDoubleTap: () => void\n  onShowSystemPrompt: () => void\n  isShowSystemPrompt: boolean\n}\n\ninterface ModelSelectionModalProps {\n  visible: boolean\n  onClose: () => void\n  iconPosition?: { x: number; y: number }\n}\n\nexport const CustomAddFileComponent: React.FC<CustomRenderActionsProps> = ({\n  onFileSelected,\n  mode = 'default',\n  chatMode = ChatMode.Text\n}) => { ... }\n\nexport const CustomHeaderRightButton: React.FC<HeaderRightButtonProps> =\n  React.memo(({ onPress, imageSource }) => (\n    <TouchableOpacity onPress={onPress} style={styles.touchStyle}>\n      <Image source={imageSource} style={styles.editImage} />\n    </TouchableOpacity>\n  ))\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle)\n\nexport const CustomScrollToBottomComponent = (): React.ReactNode => { ... }\n\nconst CircularProgress = ({\n  progress,\n  colors\n}: {\n  progress: number;\n  colors: ColorScheme;\n}) => { ... }\n\nconst ListIcon = ({ textColor }: { textColor: string }) => { ... }\n\ninterface CustomMessageProps extends MessageProps<SwiftChatMessage> {\n  chatStatus: ChatStatus\n  isLastAIMessage?: boolean\n  onRegenerate?: () => void\n}\n\nexport const isVideoFormat = (format: string) => { ... }\n\ninterface HeaderRightButtonProps {\n  onPress: (event: GestureResponderEvent) => void\n  imageSource: ImageSourcePropType\n}\n\ninterface CustomFileProps {\n  files: FileInfo[]\n  onFileUpdated?: (files: FileInfo[], isUpdate?: boolean) => void\n  mode?: DisplayMode\n}\n\nconst ImageProgressBar = () => { ... }\n\nexport const isDocumentFormat = (format: string) => { ... }\n\ninterface PromptListProps {\n  onSelectPrompt: (prompt: SystemPrompt | null) => void\n  onSwitchedToTextModel: () => void\n}\n\nconst minWidth = screenWidth > screenHeight ? screenHeight : screenWidth\n\nconst AnimatedImage = Animated.createAnimatedComponent(Image)\n\nexport const isImageFormat = (format: string) => { ... }\n\nconst ImageSpinner = ({\n  size = 24,\n  source,\n  visible,\n  isRotate = false\n}: ImageSpinnerProps) => { ... }\n\nexport const VIDEO_FORMATS = ['mp4', 'mov', 'mkv', 'webm']\n\nexport const CustomFileListComponent: React.FC<CustomFileProps> = ({\n  files,\n  onFileUpdated,\n  mode = DisplayMode.Edit\n}) => { ... }\n\nexport interface AudioWaveformRef {\n  resetAudioLevels: () => void\n}\n\nconst MODAL_HEIGHT = 360\n\ninterface CustomRenderActionsProps {\n  onFileSelected: (files: FileInfo[]) => void\n  mode?: 'default' | 'list'\n  chatMode?: ChatMode\n}\n\nconst HeaderTitle: React.FC<HeaderTitleProps> = ({\n  title,\n  usage,\n  onDoubleTap,\n  onShowSystemPrompt,\n  isShowSystemPrompt\n}) => { ... }\n\ntype NavigationProp = DrawerNavigationProp<RouteParamList>\n\nconst getFileNameWithoutExtension = (fileName: string) => { ... }\n\nconst customMarkedStyles: MarkedStyles = {\n  table: { marginVertical: 4 },\n  li: { paddingVertical: 4 },\n  h1: { fontSize: 28 },\n  h2: { fontSize: 24 },\n  h3: { fontSize: 20 },\n  h4: { fontSize: 18 },\n  blockquote: { marginVertical: 8 },\n  paragraph: { paddingVertical: 6 }\n}\n\nconst openInFileViewer = (url: string) => { ... }\n\nconst getFiles = async (res: ImagePickerResponse) => { ... }\n\nconst DefaultIcon = () => { ... }\n\nconst isAndroid = Platform.OS === 'android'\n\nexport const IMAGE_FORMATS = ['png', 'jpg', 'jpeg', 'gif', 'webp']\n\nconst ProgressCircle = ({\n  progressAnim,\n  isDark\n}: {\n  progressAnim: Animated.Value;\n  isDark: boolean;\n}) => { ... }\n\nconst getStyles = (colors: ColorScheme) => { ... }\n\nexport const EmptyChatComponent = ({\n  chatMode,\n  isLoadingMessages = false\n}: EmptyChatComponentProps): React.ReactElement => { ... }\n\nconst MAX_FILE_SIZE = 4.5 * 1024 * 1024\n\nexport enum DisplayMode {\n  Edit = 'edit',\n  Display = 'display',\n  GenImage = 'genImage'\n}\n\nconst AudioWaveformComponent = React.forwardRef<AudioWaveformRef>(\n  (props, ref) => {\n    const { colors } = useTheme();\n    const [colorOffset, setColorOffset] = useState(0);\n    const barCountRef = useRef(isMac || isPad ? 48 : 32);\n    const barValues = Array(barCountRef.current)\n      .fill(0)\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      .map(() => useSharedValue(0.3));\n    const inputAudioLevelRef = useRef(1);\n    const outputAudioLevelRef = useRef(1);\n    const [audioVolume, setAudioVolume] = useState<number>(1); // Audio volume level (1-10)\n\n    useEffect(() => {\n      // Set up voice chat service callbacks\n      voiceChatService.setOnAudioLevelCallbacks(\n        // Handle audio level changes\n        (source, level) => {\n          if (source === 'microphone') {\n            inputAudioLevelRef.current = level;\n          } else {\n            outputAudioLevelRef.current = level;\n          }\n          const maxLevel = Math.max(\n            inputAudioLevelRef.current,\n            outputAudioLevelRef.current\n          );\n          setAudioVolume(maxLevel);\n        }\n      );\n    }, []);\n\n    // Add reset method for audio levels\n    const resetAudioLevels = useCallback(() => {\n      inputAudioLevelRef.current = 1;\n      outputAudioLevelRef.current = 1;\n    }, []);\n\n    // Expose methods to parent component\n    useImperativeHandle(\n      ref,\n      () => ({\n        resetAudioLevels\n      }),\n      [resetAudioLevels]\n    );\n\n    // Gradient colors from blue to green to purple\n    const gradientColors = [\n      '#4158D0',\n      '#4B5EE8',\n      '#5564FF',\n      '#5F6CFF',\n      '#6975FF',\n      '#737EFF',\n      '#7D87FF',\n      '#8790FF',\n      '#90A0FF',\n      '#8BAFFF',\n      '#86BEFF',\n      '#80CDFF',\n      '#7ADCFF',\n      '#74EBFF',\n      '#6EFAFF',\n      '#68FFFC',\n      '#60F5F0',\n      '#58F0E0',\n      '#50EBD0',\n      '#48E6C0',\n      '#40E1B0',\n      '#38DCA0',\n      '#30D790',\n      '#29D280',\n      '#21CD70',\n      '#41D46C',\n      '#61DB68',\n      '#81E264',\n      '#A1E960',\n      '#B0ED5C',\n      '#C0F158',\n      '#D0F554',\n      '#C8F050',\n      '#BEC24C',\n      '#B49448',\n      '#AA6644',\n      '#A03840',\n      '#963A60',\n      '#8C3C80',\n      '#823EA0',\n      '#7840C0',\n      '#7E4CD8',\n      '#8458F0',\n      '#8A64FF',\n      '#9070FF',\n      '#967CFF',\n      '#9C88FF',\n      '#4158D0',\n    ];\n\n    // Color animation effect - updates every 500ms\n    useEffect(() => {\n      const colorAnimationInterval = setInterval(() => {\n        setColorOffset(prev => (prev + 1) % gradientColors.length);\n      }, 500);\n\n      return () => clearInterval(colorAnimationInterval);\n    }, [gradientColors.length]);\n\n    // Update waveform when volume changes\n    useEffect(() => {\n      // Special handling for volume=1 (silent or not recording)\n      if (audioVolume === 1) {\n        barValues.forEach(bar => {\n          // Fixed low height for all bars\n          const minHeight = 0.05;\n\n          bar.value = withTiming(minHeight, {\n            duration: 300,\n            easing: Easing.bezier(0.25, 0.1, 0.25, 1)\n          });\n        });\n        return;\n      }\n\n      // For volume > 1, animate based on volume level\n      const baseIntensity = audioVolume / 10;\n\n      barValues.forEach((bar, index) => {\n        const centerEffect =\n          1 -\n          Math.abs(\n            (index - barCountRef.current / 2) / (barCountRef.current / 2)\n          ) *\n            0.5;\n        const randomHeight =\n          (Math.random() * 0.6 + 0.2) * baseIntensity * centerEffect;\n        const delay = index * 10;\n\n        bar.value = withSequence(\n          withTiming(randomHeight, {\n            duration: 180 + delay,\n            easing: Easing.bezier(0.25, 0.1, 0.25, 1)\n          }),\n          withTiming(0.05 + Math.random() * 0.15 * baseIntensity, {\n            duration: 220 + delay,\n            easing: Easing.bezier(0.25, 0.1, 0.25, 1)\n          })\n        );\n      });\n    }, [barValues, audioVolume]);\n\n    const animatedBarStyles = barValues.map(bar =>\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useAnimatedStyle(() => ({\n        height: `${bar.value * 100}%`,\n        opacity: 0.7 + bar.value * 0.3\n      }))\n    );\n\n    const styles = createStyles(colors);\n\n    return (\n      <View style={styles.container}>\n        <View style={styles.waveformContainer}>\n          {barValues.map((_, index) => (\n            <Animated.View\n              key={index}\n              style={[\n                styles.bar,\n                animatedBarStyles[index],\n                {\n                  backgroundColor:\n                    gradientColors[\n                      (index + colorOffset) % gradientColors.length\n                    ]\n                },\n              ]}\n            />\n          ))}\n        </View>\n      </View>\n    );\n  }\n)\n\nconst CustomMessageComponent: React.FC<CustomMessageProps> = ({\n  currentMessage,\n  chatStatus,\n  isLastAIMessage,\n  onRegenerate\n}) => { ... }\n\nexport const CustomChatFooter: React.FC<CustomComposerProps> = ({\n  files,\n  onFileUpdated,\n  onSystemPromptUpdated,\n  onSwitchedToTextModel,\n  chatMode,\n  isShowSystemPrompt\n}) => { ... }\n\nconst isPad = minWidth > 434\n\nconst SCREEN_WIDTH = Dimensions.get('window').width\n\nconst MAX_VIDEO_SIZE = 8\n\nexport const isVideoSupported = (): boolean => { ... }\n\nexport const DOCUMENT_FORMATS = [\n  'pdf',\n  'csv',\n  'doc',\n  'docx',\n  'xls',\n  'xlsx',\n  'html',\n  'txt',\n  'md',\n  ...EXTRA_DOCUMENT_FORMATS,\n]\n\nexport const PromptListComponent: React.FC<PromptListProps> = ({\n  onSelectPrompt,\n  onSwitchedToTextModel\n}) => { ... }\n\npackage react-native.src.chat.component.markdown;\n\nexport const CopyButton: React.FC<CopyButtonProps> = React.memo(\n  ({ onCopy, colors, isDark }) => {\n    const [copied, setCopied] = useState(false);\n    const styles = createCustomStyles(colors);\n\n    const handleCopy = useCallback(() => {\n      onCopy();\n      setCopied(true);\n    }, [onCopy]);\n\n    // UseMemo to memoize the image source to prevent flickering\n    const imageSource = useMemo(() => {\n      return copied\n        ? isDark\n          ? require('../../../assets/done_dark.png')\n          : require('../../../assets/done.png')\n        : isDark\n        ? require('../../../assets/copy_grey.png')\n        : require('../../../assets/copy.png');\n    }, [copied, isDark]);\n\n    useEffect(() => {\n      if (copied) {\n        const timer = setTimeout(() => {\n          setCopied(false);\n        }, 2000);\n\n        return () => clearTimeout(timer);\n      }\n    }, [copied]);\n    return (\n      <TouchableOpacity style={styles.copyButtonLayout} onPress={handleCopy}>\n        <Image source={imageSource} style={styles.copyButton} />\n      </TouchableOpacity>\n    );\n  },\n  () => true\n)\n\nclass Parser {\n  private renderer: RendererInterface\n  private styles: MarkedStyles\n  private readonly headingStylesMap: Record<number, TextStyle | undefined>\n  private readonly baseUrl: string\n  constructor(options: ParserOptions) { ... }\n  parse(tokens: Token[]) { ... }\n  private _parse(tokens: Token[], styles?: ViewStyle | TextStyle | ImageStyle) { ... }\n  private _parseToken(\n      token: Token,\n      styles?: ViewStyle | TextStyle | ImageStyle\n    ): ReactNode { ... }\n  private getNormalizedSiblingNodesForBlockAndInlineTokens(\n      tokens: Token[],\n      textStyle?: TextStyle\n    ): ReactNode[] { ... }\n  private hasDuplicateTextChildToken(token: Token): boolean { ... }\n}\n\nconst CustomCodeHighlighter = lazy(() => import('./CustomCodeHighlighter'))\n\nconst ALLOWED_STYLE_PROPERTIES: Record<string, boolean> = {\n  color: true,\n  background: true,\n  backgroundColor: true,\n  fontWeight: true,\n  fontStyle: true\n}\n\nconst getTableWidthArr = (\n  totalCols: number,\n  windowWidth: number,\n  windowHeight: number\n) => { ... }\n\nexport interface useMarkdownHookOptions {\n  colorScheme?: ColorSchemeName\n  renderer?: RendererInterface\n  theme?: UserTheme\n  styles?: MarkedStyles\n  baseUrl?: string\n  tokenizer?: Tokenizer<CustomToken>\n  chatStatus?: ChatStatus\n}\n\nconst MemoizedCodeHighlighter = React.memo(\n  ({\n    text,\n    language,\n    colors,\n    isDark\n  }: {\n    text: string;\n    language?: string;\n    colors: ColorScheme;\n    isDark: boolean;\n  }) => {\n    const styles = createCustomStyles(colors);\n    const handleCopy = useCallback(() => {\n      Clipboard.setString(text);\n    }, [text]);\n\n    const hljsStyle = isDark ? vs2015 : github;\n\n    return (\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <Text style={styles.headerText}>\n            {language === '' ? 'code' : language}\n          </Text>\n          <CopyButton onCopy={handleCopy} colors={colors} isDark={isDark} />\n        </View>\n        <Suspense fallback={<Text style={styles.loading}>Loading...</Text>}>\n          <CustomCodeHighlighter\n            hljsStyle={hljsStyle}\n            scrollViewProps={{\n              contentContainerStyle: {\n                padding: 12,\n                minWidth: '100%',\n                borderBottomLeftRadius: 8,\n                borderBottomRightRadius: 8,\n                backgroundColor: colors.codeBackground\n              },\n              // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              // @ts-expect-error\n              backgroundColor: colors.codeBackground\n            }}\n            textStyle={styles.text}\n            language={language ?? 'code'}>\n            {text}\n          </CustomCodeHighlighter>\n        </Suspense>\n      </View>\n    );\n  },\n  (prevProps, nextProps) =>\n    prevProps.text === nextProps.text &&\n    prevProps.language === nextProps.language &&\n    prevProps.colors === nextProps.colors &&\n    prevProps.isDark === nextProps.isDark\n)\n\nexport class CustomMarkdownRenderer\n  extends Renderer\n  implements RendererInterface {\n  private width = Dimensions.get('window').width\n  private height = Dimensions.get('window').height\n  private colors: ColorScheme\n  private styles: ReturnType<typeof createCustomStyles>\n  private isDark: boolean\n  constructor(\n      private onImagePress: (pressMode: PressMode, url: string) => void,\n      colors: ColorScheme,\n      isDark: boolean\n    ) { ... }\n  getTextView(children: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  getNodeForTextArray(text: ReactNode[], styles?: TextStyle): ReactNode { ... }\n  codespan(text: string, styles?: TextStyle): ReactNode { ... }\n  text(text: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  strong(children: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  em(children: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  br(): ReactNode { ... }\n  del(children: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  heading(text: string | ReactNode[], styles?: TextStyle): ReactNode { ... }\n  escape(text: string, styles?: TextStyle): ReactNode { ... }\n  image(uri: string, alt?: string, style?: ImageStyle): ReactNode { ... }\n  code(\n      text: string,\n      language?: string,\n      _containerStyle?: ViewStyle,\n      _textStyle?: TextStyle\n    ): ReactNode { ... }\n  table(\n      header: ReactNode[][],\n      rows: ReactNode[][][],\n      tableStyle?: ViewStyle,\n      rowStyle?: ViewStyle,\n      cellStyle?: ViewStyle\n    ): React.ReactNode { ... }\n  list(\n      ordered: boolean,\n      li: ReactNode[],\n      listStyle?: ViewStyle,\n      textStyle?: TextStyle,\n      startIndex?: number\n    ): ReactNode { ... }\n  custom(\n      identifier: string,\n      _raw: string,\n      _children?: ReactNode[],\n      args?: Record<string, unknown>\n    ): ReactNode { ... }\n}\n\ntype ChatMarkdownProps = MarkdownProps & {\n  chatStatus: ChatStatus;\n};\n\ntype HighlighterStyleSheet = { [key: string]: TextStyle }\n\nconst getRNStylesFromHljsStyle = (\n  hljsStyle: ReactStyle\n): HighlighterStyleSheet => { ... }\n\nconst Markdown = ({\n  value,\n  flatListProps,\n  theme,\n  baseUrl,\n  renderer,\n  styles,\n  tokenizer,\n  chatStatus\n}: ChatMarkdownProps) => { ... }\n\nexport interface CodeHighlighterProps extends SyntaxHighlighterProps {\n  hljsStyle: ReactStyle\n  textStyle?: StyleProp<TextStyle>\n  scrollViewProps?: ScrollViewProps\n  containerStyle?: StyleProp<ViewStyle>\n}\n\nexport class CustomTokenizer extends MarkedTokenizer<CustomToken> {\n  list(this: MarkedTokenizer<CustomToken>, src: string) { ... }\n  processLatex(src: string): { token: CustomToken | null; raw: string } | null { ... }\n  paragraph(\n      src: string\n    ): ReturnType<MarkedTokenizer<CustomToken>['paragraph']> { ... }\n  private processDollarLatex(src: string): CustomToken | null { ... }\n  private processLatexInText(\n      src: string,\n      match: RegExpMatchArray,\n      isDisplayMode: boolean,\n      extractParts: (\n        src: string,\n        match: RegExpMatchArray\n      ) => {\n        beforeFormula: string;\n        formula: string;\n        formulaContent: string;\n        afterFormula: string;\n      }\n    ): ReturnType<MarkedTokenizer<CustomToken>['text']> { ... }\n  text(src: string): ReturnType<MarkedTokenizer<CustomToken>['text']> { ... }\n  escape(src: string): ReturnType<MarkedTokenizer<CustomToken>['escape']> { ... }\n}\n\nconst MemoizedText = memo(\n  ({\n    style,\n    children\n  }: {\n    style: StyleProp<TextStyle>;\n    children: ReactNode;\n  }) => <Text style={style}>{children}</Text>\n)\n\ntype ReactStyle = Record<string, CSSProperties>\n\nconst useMarkdown = (\n  value: string,\n  options?: useMarkdownHookOptions\n): ReactNode[] => { ... }\n\nexport const CustomCodeHighlighter: FunctionComponent<CodeHighlighterProps> = ({\n  children,\n  textStyle,\n  hljsStyle,\n  scrollViewProps,\n  containerStyle,\n  ...rest\n}) => { ... }\n\nfunction getMathKey() { ... }\n\nlet mathViewIndex = 0\n\nconst createCustomStyles = (colors: ColorScheme) => { ... }\n\nconst styles = StyleSheet.create({\n  inputText: {\n    lineHeight: 20,\n    marginTop: -5\n  }\n})\n\nconst cleanStyle = (style: CSSProperties) => { ... }\n\ninterface CopyButtonProps {\n  onCopy: () => void\n  colors: ColorScheme\n  isDark: boolean\n}\n\npackage react-native.src.chat.service;\n\nconst voiceChatEmitter = VoiceChatModule\n  ? new NativeEventEmitter(VoiceChatModule)\n  : null\n\nexport const voiceChatService = new VoiceChatService()\n\nexport class VoiceChatService {\n  private isInitialized = false\n  private subscriptions: EmitterSubscription[] = []\n  private onTranscriptReceivedCallback?: (role: string, text: string) => void\n  private onErrorCallback?: (message: string) => void\n  private onAudioLevelChangedCallback?: (source: string, level: number) => void\n  constructor() { ... }\n  public setCallbacks(\n      onTranscriptReceived?: (role: string, text: string) => void,\n      onError?: (message: string) => void\n    ) { ... }\n  public setOnAudioLevelCallbacks(\n      onAudioLevelChanged?: (source: string, level: number) => void\n    ) { ... }\n  private setupEventListeners() { ... }\n  private async getValidConfig(): Promise<object | null> { ... }\n  public async initialize(): Promise<boolean> { ... }\n  public async startConversation(): Promise<boolean> { ... }\n  public async endConversation(): Promise<boolean> { ... }\n  public cleanup() { ... }\n}\n\npackage react-native.src.chat.util;\n\nexport async function getBedrockMessagesFromChatMessages(\n  messages: SwiftChatMessage[]\n): Promise<BedrockMessage[]> { ... }\n\nlet hapticFeedbackEnabled = getHapticEnabled()\n\nconst MAX_IMAGES = 20\n\nexport interface ImageContent {\n  image: ImageInfo\n}\n\nexport const getFileTypeSummary = (files: FileInfo[]) => { ... }\n\nexport const saveImageToLocal = async (\n  base64ImageData: string\n): Promise<string> => { ... }\n\nexport function setHapticFeedbackEnabled(isEnabled: boolean) { ... }\n\nexport type OpenAIMessage = {\n  role: string;\n  content:\n    | string\n    | Array<{\n        type: 'text' | 'image_url';\n        text?: string;\n        image_url?: {\n          url: string;\n        };\n      }>;\n};\n\nexport type MessageContent = | TextContent\n  | ImageContent\n  | VideoContent\n  | DocumentContent;\n\nexport const getFullFileUrl = (url: string) => { ... }\n\nconst MAX_NOVA_VIDEOS = 1\n\nexport function trigger(method: HapticFeedbackTypes) { ... }\n\nexport type BedrockMessage = {\n  role: string;\n  content: MessageContent[];\n};\n\nexport interface DocumentContent {\n  document: {\n      format: string;\n      name: string;\n      source: {\n        bytes: string;\n      };\n    }\n}\n\nexport interface TextContent {\n  text: string\n}\n\nfunction normalizeFilename(filename: string): string { ... }\n\nexport interface VideoContent {\n  video: {\n      format: string;\n      source: {\n        bytes: string;\n      };\n    }\n}\n\nexport async function getBedrockMessage(\n  message: SwiftChatMessage\n): Promise<BedrockMessage> { ... }\n\nconst MAX_NOVA_FILES = 5\n\nexport interface ImageInfo {\n  format: string\n  source: {\n      bytes: string;\n    }\n}\n\nexport const isAllFileReady = (files: FileInfo[]) => { ... }\n\nconst getUniqueFileName = async (\n  basePath: string,\n  originalFileName: string\n): Promise<string> => { ... }\n\nexport const getFileBytes = async (fileUrl: string) => { ... }\n\nconst isNova = (): boolean => { ... }\n\nfunction isValidFilename(filename: string): boolean { ... }\n\nconst hapticOptions = {\n  enableVibrateFallback: true,\n  ignoreAndroidSystemSettings: true\n}\n\nexport const saveFile = async (sourceUrl: string, fileName: string) => { ... }\n\nexport const checkFileNumberLimit = (\n  prevFiles: FileInfo[],\n  newFiles: FileInfo[]\n) => { ... }\n\nexport const showInfo = (msg: string) => { ... }\n\nconst MAX_DOCUMENTS = 5\n\nexport const getFileTextContent = async (fileUrl: string): Promise<string> => { ... }\n\npackage react-native.src.history;\n\nexport function groupMessagesByDate(messages: Chat[]) { ... }\n\ninterface AppProviderProps {\n  children: ReactNode\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined)\n\nexport const useAppContext = () => { ... }\n\nexport type DrawerType = 'permanent' | 'slide'\n\nfunction getTodayTimestamp(): number { ... }\n\nfunction getFirstDayOfMonthTimestamp(yearMonth: string): number { ... }\n\nconst CustomDrawerContent: React.FC<DrawerContentComponentProps> = ({\n  navigation\n}) => { ... }\n\ninterface AppContextType {\n  sendEvent: (event: string, params?: EventData) => void\n  event: { event: string; params?: EventData } | null\n  drawerType: DrawerType\n  setDrawerType: (type: DrawerType) => void\n}\n\nconst createStyles = (colors: ColorScheme) => { ... }\n\nfunction formatTimestampToYearMonth(timestamp: number): string { ... }\n\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => { ... }\n\npackage react-native.src.prompt;\n\ntype PromptScreenRouteProp = RouteProp<RouteParamList, 'Prompt'>\n\ninterface PresetPromptListProps {\n}\n\nconst styles = StyleSheet.create({\n  headerContainer: {\n    marginLeft: -10,\n    paddingRight: 16,\n    padding: 10\n  },\n  headerImage: { width: 20, height: 20 }\n})\n\ntype RootStackParamList = {\n  Drawer: undefined;\n  TokenUsage: undefined;\n  Prompt: { prompt?: any };\n  PresetPrompts: undefined;\n};\n\nexport interface PresetPrompt extends SystemPrompt {\n  avatar: string\n  description: string\n  category?: string\n}\n\nconst MAX_NAME_LENGTH = 20\n\ntype PresetPromptListNavigationProp = NativeStackNavigationProp<RootStackParamList>\n\nconst createStyles = (colors: ColorScheme) => { ... }\n\nexport const PROMPT_CATEGORIES = [\n  'Profesional',\n  'Instansi', \n  'Asisten',\n]\n\nfunction PromptScreen(): React.JSX.Element { ... }\n\nexport const PRESET_PROMPTS: PresetPrompt[] = [\n  {\n    id: 1,\n    name: 'Broperty Ai',\n    prompt: `Saya adalah **Broperty Ai**, bot utama yang **HANYA merespon komunikasi terkait properti real estate**. Jika pertanyaan tidak sesuai dengan topik properti real estate, saya akan secara halus menolaknya.\n\n**PERAN UTAMA SAYA:**\n1. **GERBANG UTAMA** - Selalu berkomunikasi dengan user dan internal Broperty, serta menghubungkan kedua pihak tersebut\n2. **IDENTIFIKASI KEBUTUHAN USER** - Berusaha untuk selalu mengetahui & memenuhi kebutuhan spesifik user terkait properti\n3. **MENYAMBUNGKAN KE BERBAGAI FITUR YANG ADA** - Menghubungkan user ke sub-bot profesional, web view, atau Google Maps\n\n**FITUR AKTIF YANG TERSEDIA:**\n- **Sub Bot Profesional Ecosystem:**\n  1. 🏠 Agensi Properti Ai - Konsultasi jual beli properti\n  2. 📜 Notaris Ai - Pengurusan sertifikat dan dokumen legal\n  3. ⚖️ Pengacara Ai - Konsultasi hukum properti dan kontrak\n  4. 🏛 Aparatur Pemerintah Ai - Perangkat pemerintah untuk pengurusan properti\n  5. 💻 Sertifikasi Elektronik Ai - Bantuan sertifikat elektronik\n  6. 🏦 KPR Bank Ai - Informasi KPR berbagai bank\n\n- **Web View Integration** - Akses konten properti terkini\n- **Google Maps Integration** - Lokasi dan navigasi properti (Fitur Baru!)\n\nSilakan ajukan pertanyaan terkait properti real estate, saya akan menyambungkan Anda ke fitur yang tepat!`,\n    description: 'Ai Utama sebagai **Gerbang Komunikasi** & **Konektor Fitur Properti**',\n    avatar: '🏠',\n    includeHistory: true,\n    category: 'Utama'\n  },\n  {\n    id: 926,\n    name: 'Agensi Properti Ai',\n    prompt: 'Aku adalah Agensi Properti Ai berpengalaman puluhan tahun dalam membantu pembelian dan penjualan properti klien kami. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan proses jual beli properti',\n    description: 'Konsultasi dalam pembelian atau penjualan properti milik anda',\n    avatar: '👨‍💼',\n    includeHistory: true,\n    category: 'Asisten'\n  },\n  {\n    id: 900,\n    name: 'Notaris Ai',\n    prompt: 'Halo! Aku adalah Notaris Ai. Aku akan memberikan kamu berbagai info terkait apapun itu yang menjadi tugas Notaris. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan tugas kenotariatan',\n    description: 'Membuat dokumen transaksi jual beli properti, legalisasi dopkumen serta membantu pengurusan surat ke BPN',\n    avatar: '📜',\n    includeHistory: true,\n    category: 'Profesional'\n  },\n  {\n    id: 901,\n    name: 'Pengacara Ai',\n    prompt: 'Halo! Aku adalah Pengacara Ai. Aku akan memberikan kamu berbagai info berita terkait tugas Pengacara yang berkaitan dengan properti. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan tugas Pengacara properti',\n    description: 'Menangani sengketa, memeriksa dokumen transaksi jual beli & pendampingan hukum di pengadilan',\n    avatar: '⚖️',\n    includeHistory: true,\n    category: 'Profesional'\n  },\n  {\n    id: 911,\n    name: 'Aparatur Pemerintah Ai',\n    prompt: 'Halo! Aku adalah Aparatur Pemerintah Ai seperti kepala desa, Lurah, Camat, Bupati, Walikota dll yang membantu terkait segala sesuatu yang berhubungan dengan properti. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan tugas Aparatur Pemerintah terkait properti',\n    description: 'Mengurus prosedur kepemilikan properti di pemerintahan',\n    avatar: '🏛',\n    includeHistory: true,\n    category: 'Instansi'\n  },\n  {\n    id: 920,\n    name: 'Sertifikasi Elektronik Ai',\n    prompt: 'Halo! Aku adalah asisten Program Sertifikasi Elektronik Ai yang akan membantu anda dalam pengurusan sertifikat elektronik di BPN. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan Program Sertifikasi Elektronik',\n    description: 'Membantu dalam pembuatan Sertifikasi Elektronik',\n    avatar: '💻',\n    includeHistory: true,\n    category: 'Asisten'\n  },\n   {\n    id: 922,\n    name: 'KPR Bank Ai',\n    prompt: 'Halo! Aku adalah asisten pengajuan KPR Bank Ai yang bertugas memberikan info dan membantu anda terkait segala sesuatu mengenai KPR berbagai Bank di Indonesia. Saya tidak dapat menjawab pertanyaan apapun itu yg tdk berkaitan dengan KPR Bank',\n    description: 'Memberikan segala info terkait KPR di Indonesia',\n    avatar: '🏦',   \n    includeHistory: true,\n    category: 'Asisten'\n  },\n]\n\nconst PresetPromptList: React.FC<PresetPromptListProps> = () => { ... }\n\nexport const HeaderLeftView = (navigation: NavigationProp, isDark: boolean) => { ... }\n\ntype NavigationProp = DrawerNavigationProp<RouteParamList>\n\nfunction calculateTextLength(str: string) { ... }\n\npackage react-native.src.settings;\n\nfunction SettingsScreen(): React.JSX.Element { ... }\n\nexport function addBedrockPrefixToDeepseekModels(models: Model[]): void { ... }\n\nfunction getImagePrice(\n  modelName: keyof ImageModelPrices,\n  size: 'small' | 'medium' | 'large'\n): number { ... }\n\nconst CustomDropdown: React.FC<CustomDropdownProps> = ({\n  label,\n  data,\n  value,\n  onChange,\n  placeholder,\n  searchPlaceholder = 'Search...'\n}) => { ... }\n\nfunction TabButton({\n  label,\n  isSelected,\n  onPress\n}: TabButtonProps): React.JSX.Element { ... }\n\nexport const getUsagePrice = (usage: Usage): UsagePrice => { ... }\n\nexport const ModelPrice: ModelPriceType = {\n  textModelPrices: {\n    'Bedrock DeepSeek-R1': {\n      inputTokenPrice: 0.00135,\n      outputTokenPrice: 0.0054\n    },\n    'DeepSeek-V3': {\n      inputTokenPrice: 0.00027,\n      outputTokenPrice: 0.0011\n    },\n    'DeepSeek-R1': {\n      inputTokenPrice: 0.00055,\n      outputTokenPrice: 0.00219\n    },\n    'GPT-4.1': {\n      inputTokenPrice: 0.002,\n      outputTokenPrice: 0.008\n    },\n    'GPT-4.1-mini': {\n      inputTokenPrice: 0.0004,\n      outputTokenPrice: 0.0016\n    },\n    'GPT-4.1-nano': {\n      inputTokenPrice: 0.0001,\n      outputTokenPrice: 0.0004\n    },\n    'GPT-4o': {\n      inputTokenPrice: 0.0025,\n      outputTokenPrice: 0.01\n    },\n    'GPT-4o mini': {\n      inputTokenPrice: 0.00015,\n      outputTokenPrice: 0.0006\n    },\n    'Titan Text G1 - Lite': {\n      inputTokenPrice: 0.00015,\n      outputTokenPrice: 0.0002\n    },\n    'Titan Text G1 - Express': {\n      inputTokenPrice: 0.0002,\n      outputTokenPrice: 0.0006\n    },\n    'Titan Text G1 - Premier': {\n      inputTokenPrice: 0.0005,\n      outputTokenPrice: 0.0015\n    },\n    'Nova Pro': {\n      inputTokenPrice: 0.0008,\n      outputTokenPrice: 0.0032\n    },\n    'Nova Lite': {\n      inputTokenPrice: 0.00006,\n      outputTokenPrice: 0.00024\n    },\n    'Nova Micro': {\n      inputTokenPrice: 0.000035,\n      outputTokenPrice: 0.00014\n    },\n    'Claude 3.5 Sonnet v2': {\n      inputTokenPrice: 0.003,\n      outputTokenPrice: 0.015\n    },\n    'Claude 3.5 Haiku': {\n      inputTokenPrice: 0.0008,\n      outputTokenPrice: 0.004\n    },\n    'Claude Instant': {\n      inputTokenPrice: 0.0008,\n      outputTokenPrice: 0.0024\n    },\n    Claude: {\n      inputTokenPrice: 0.008,\n      outputTokenPrice: 0.024\n    },\n    'Claude 3 Sonnet': {\n      inputTokenPrice: 0.003,\n      outputTokenPrice: 0.015\n    },\n    'Claude 3 Haiku': {\n      inputTokenPrice: 0.00025,\n      outputTokenPrice: 0.00125\n    },\n    'Claude 3 Opus': {\n      inputTokenPrice: 0.015,\n      outputTokenPrice: 0.075\n    },\n    'Claude 3.5 Sonnet': {\n      inputTokenPrice: 0.003,\n      outputTokenPrice: 0.015\n    },\n    'Claude 3.7 Sonnet': {\n      inputTokenPrice: 0.003,\n      outputTokenPrice: 0.015\n    },\n    Command: {\n      inputTokenPrice: 0.0015,\n      outputTokenPrice: 0.002\n    },\n    'Command R': {\n      inputTokenPrice: 0.0005,\n      outputTokenPrice: 0.0015\n    },\n    'Command R+': {\n      inputTokenPrice: 0.003,\n      outputTokenPrice: 0.015\n    },\n    'Command Light': {\n      inputTokenPrice: 0.0003,\n      outputTokenPrice: 0.0006\n    },\n    'Llama 3 8B Instruct': {\n      inputTokenPrice: 0.0003,\n      outputTokenPrice: 0.0006\n    },\n    'Llama 3 70B Instruct': {\n      inputTokenPrice: 0.00265,\n      outputTokenPrice: 0.0035\n    },\n    'Llama 3.1 8B Instruct': {\n      inputTokenPrice: 0.00022,\n      outputTokenPrice: 0.00022\n    },\n    'Llama 3.1 70B Instruct': {\n      inputTokenPrice: 0.00072,\n      outputTokenPrice: 0.00072\n    },\n    'Llama 3.1 405B Instruct': {\n      inputTokenPrice: 0.0024,\n      outputTokenPrice: 0.0024\n    },\n    'Llama 3.2 1B Instruct': {\n      inputTokenPrice: 0.0001,\n      outputTokenPrice: 0.0001\n    },\n    'Llama 3.2 3B Instruct': {\n      inputTokenPrice: 0.00015,\n      outputTokenPrice: 0.00015\n    },\n    'Llama 3.2 11B Instruct': {\n      inputTokenPrice: 0.00016,\n      outputTokenPrice: 0.00016\n    },\n    'Llama 3.2 90B Instruct': {\n      inputTokenPrice: 0.00072,\n      outputTokenPrice: 0.00072\n    },\n    'Mistral 7B Instruct': {\n      inputTokenPrice: 0.00015,\n      outputTokenPrice: 0.0002\n    },\n    'Mixtral 8x7B Instruct': {\n      inputTokenPrice: 0.00045,\n      outputTokenPrice: 0.0007\n    },\n    'Mistral Small (24.02)': {\n      inputTokenPrice: 0.001,\n      outputTokenPrice: 0.003\n    },\n    'Mistral Large (24.02)': {\n      inputTokenPrice: 0.004,\n      outputTokenPrice: 0.012\n    },\n    'Mistral Large (24.07)': {\n      inputTokenPrice: 0.002,\n      outputTokenPrice: 0.006\n    },\n    'Jamba-Instruct': {\n      inputTokenPrice: 0.0005,\n      outputTokenPrice: 0.0007\n    },\n    'Jamba 1.5 Large': {\n      inputTokenPrice: 0.002,\n      outputTokenPrice: 0.008\n    },\n    'Jamba 1.5 Mini': {\n      inputTokenPrice: 0.0002,\n      outputTokenPrice: 0.0004\n    }\n  },\n  imageModelPrices: {\n    'Titan Image Generator G1': {\n      small: 0.008,\n      medium: 0.01\n    },\n    'Titan Image Generator G1 v2': {\n      small: 0.008,\n      medium: 0.01\n    },\n    'Nova Canvas': {\n      medium: 0.04,\n      large: 0.06\n    },\n    'SDXL 1.0': {\n      medium: 0.04\n    },\n    'SD3 Large 1.0': {\n      medium: 0.08\n    },\n    'Stable Diffusion 3.5 Large': {\n      medium: 0.08\n    },\n    'Stable Image Core 1.0': {\n      medium: 0.04\n    },\n    'Stable Image Ultra 1.0': {\n      medium: 0.14\n    }\n  }\n}\n\nexport function getTotalInputPrice(usage: Usage[]) { ... }\n\nexport const GITHUB_LINK = 'https://github.com/aws-samples/swift-chat'\n\nconst createStyles = (colors: ColorScheme) => { ... }\n\nexport function getTotalOutputTokens(usage: Usage[]) { ... }\n\ninterface TabButtonProps {\n  label: string\n  isSelected: boolean\n  onPress: () => void\n}\n\nconst CustomTextInput: React.FC<CustomTextInputProps> = ({\n  label,\n  value,\n  onChangeText,\n  placeholder,\n  secureTextEntry = false,\n  numberOfLines = 1\n}) => { ... }\n\ntype ImageModelPrices = {\n  'Titan Image Generator G1': {\n    small: number;\n    medium: number;\n  };\n  'Titan Image Generator G1 v2': {\n    small: number;\n    medium: number;\n  };\n  'Nova Canvas': {\n    medium: number;\n    large: number;\n  };\n  'SDXL 1.0': {\n    medium: number;\n  };\n  'SD3 Large 1.0': {\n    medium: number;\n  };\n  'Stable Diffusion 3.5 Large': {\n    medium: number;\n  };\n  'Stable Image Core 1.0': {\n    medium: number;\n  };\n  'Stable Image Ultra 1.0': {\n    medium: number;\n  };\n};\n\nexport function getTotalImageCount(usage: Usage[]) { ... }\n\ninterface ModelPriceType {\n  textModelPrices: Record<\n      string,\n      { inputTokenPrice: number; outputTokenPrice: number }\n    >\n  imageModelPrices: ImageModelPrices\n}\n\ntype NavigationProp = DrawerNavigationProp<RouteParamList>\n\nexport function getTotalOutputPrice(usage: Usage[]) { ... }\n\nconst initUpgradeInfo: UpgradeInfo = {\n  needUpgrade: false,\n  version: '',\n  url: ''\n}\n\nexport function getTotalInputTokens(usage: Usage[]) { ... }\n\nexport function getTotalImagePrice(usage: Usage[]) { ... }\n\ninterface DropdownItem {\n  label: string\n  value: string\n}\n\ninterface CustomDropdownProps {\n  label: string\n  data: DropdownItem[]\n  value: string | null\n  onChange: (item: DropdownItem) => void\n  placeholder: string\n  searchPlaceholder?: string\n}\n\ninterface CustomTextInputProps {\n  label: string\n  value: string\n  onChangeText: (text: string) => void\n  placeholder: string\n  secureTextEntry?: boolean\n  numberOfLines?: number\n}\n\nexport function getTotalCost(usage: Usage[]) { ... }\n\nfunction TokenUsageScreen(): React.JSX.Element { ... }\n\npackage react-native.src.storage;\n\nexport function saveDeepSeekApiKey(apiKey: string) { ... }\n\nexport function deleteMessagesBySessionId(sessionId: number) { ... }\n\nexport function getCurrentSystemPrompt(): SystemPrompt | null { ... }\n\nexport function saveCurrentVoiceSystemPrompt(prompts: SystemPrompt | null) { ... }\n\nexport function updateChatTitlesFromUserMessages() { ... }\n\nconst tokenInfoKey = keyPrefix + 'tokenInfo'\n\nexport function getDefaultImageModels() { ... }\n\nexport function saveRegion(region: string) { ... }\n\nexport function getDefaultTextModels() { ... }\n\nexport const GPTModels = [\n  { modelName: 'GPT-4.1', modelId: 'gpt-4.1', modelTag: ModelTag.OpenAI },\n  {\n    modelName: 'GPT-4.1-mini',\n    modelId: 'gpt-4.1-mini',\n    modelTag: ModelTag.OpenAI\n  },\n  {\n    modelName: 'GPT-4.1-nano',\n    modelId: 'gpt-4.1-nano',\n    modelTag: ModelTag.OpenAI\n  },\n  { modelName: 'GPT-4o', modelId: 'gpt-4o', modelTag: ModelTag.OpenAI },\n  {\n    modelName: 'GPT-4o mini',\n    modelId: 'gpt-4o-mini',\n    modelTag: ModelTag.OpenAI\n  },\n]\n\nexport function getMessagesBySessionId(sessionId: number): SwiftChatMessage[] { ... }\n\nexport function getOllamaApiUrl(): string { ... }\n\nexport function saveAllSystemPrompts(prompts: SystemPrompt[]) { ... }\n\nexport function saveOpenAICompatModels(models: string) { ... }\n\nexport function updateMessageList(chatList: Chat[]) { ... }\n\nconst apiKeyTag = keyPrefix + 'apiKeyTag'\n\nexport const DefaultTextModel = [\n  {\n    modelName: 'DeepSeek-V3',\n    modelId: 'deepseek-chat',\n    modelTag: ModelTag.Broperty\n  },\n]\n\nconst DefaultImageModel = {\n  modelName: 'Stable Diffusion 3.5 Large',\n  modelId: 'stability.sd3-5-large-v1:0',\n  modelTag: ModelTag.Bedrock\n}\n\nconst thinkingEnabledKey = keyPrefix + 'thinkingEnabledKey'\n\nexport function saveImageModel(model: Model) { ... }\n\nexport function saveApiKey(apiKey: string) { ... }\n\nconst sessionIdPrefix = keyPrefix + 'sessionId/'\n\nexport function getSystemPrompts(type?: string): SystemPrompt[] { ... }\n\nconst messageListKey = keyPrefix + 'messageList'\n\nexport function getApiUrl(): string { ... }\n\nexport function saveThinkingEnabled(enabled: boolean) { ... }\n\nconst openAICompatModelsKey = keyPrefix + 'openAICompatModelsKey'\n\nconst systemPromptsKey = keyPrefix + 'systemPromptsKey'\n\nexport function saveKeys(apiUrl: string, apiKey: string) { ... }\n\nexport function getCurrentVoiceSystemPrompt(): SystemPrompt | null { ... }\n\nexport function saveOllamaApiURL(apiUrl: string) { ... }\n\nexport function getMessageList(): Chat[] { ... }\n\nexport function getThinkingEnabled() { ... }\n\nconst ollamaApiUrlKey = keyPrefix + 'ollamaApiUrlKey'\n\nexport function saveOpenAIApiKey(apiKey: string) { ... }\n\nexport const DefaultVoiceSystemPrompts = [\n  {\n    id: -4,\n    name: 'LearnWords',\n    prompt: `Please act as an English vocabulary coach. In each response, follow this exact format:\n\n1. If the user has spoken: Score their speaking from 1-10\n2. If score < 7: Provide brief correction tips and ask them to repeat the same word\n3. If score ≥ 7: ask user to read a new English word\n\nKeep all responses under 5 sentences. Begin by introducing yourself and providing the first practice word.\n\nRemember: ALWAYS start with a score after the user speaks`,\n    includeHistory: true,\n    promptType: 'voice',\n    allowInterruption: false\n  },\n  {\n    id: -5,\n    name: 'LearnSentences',\n    prompt: `Please act as an English pronunciation coach. In each response, follow this exact format:\n\n1. If the user has spoken: Score their pronunciation from 1-10\n2. If score < 7: Provide brief correction tips and ask them to repeat the same sentence\n3. If score ≥ 7: Introduce a new common English phrase for practice\n\nKeep all responses under 5 sentences. Begin by introducing yourself and providing the first practice sentence.\n\nRemember: ALWAYS start with a score after the user speaks`,\n    includeHistory: true,\n    promptType: 'voice',\n    allowInterruption: false\n  },\n  {\n    id: -6,\n    name: 'Story',\n    prompt:\n      'You are a storytelling expert. Please first ask the user what type of story they would like to hear, and then tell that story with emotion and expressiveness.',\n    includeHistory: true,\n    promptType: 'voice',\n    allowInterruption: true\n  },\n]\n\nexport function saveVoiceId(voiceId: string) { ... }\n\nconst textModelKey = keyPrefix + 'textModelKey'\n\nexport function getImageModel(): Model { ... }\n\nexport function saveOpenAICompatApiKey(apiKey: string) { ... }\n\nexport function saveModelOrder(models: Model[]) { ... }\n\nexport function getOpenAICompatApiKey(): string { ... }\n\nconst hapticEnabledKey = keyPrefix + 'hapticEnabled'\n\nexport const DefaultRegion = 'ap-southeast-1'\n\nexport function getAllImageSize(imageModelId: string = '') { ... }\n\nexport function getDeepSeekApiKey(): string { ... }\n\nexport function getOpenAIApiKey(): string { ... }\n\nexport function saveSystemPrompts(prompts: SystemPrompt[], type?: string) { ... }\n\nexport const VoiceIDList = [\n  {\n    voiceName: 'Matthew (American English)',\n    voiceId: 'matthew'\n  },\n  {\n    voiceName: 'Tiffany (American English)',\n    voiceId: 'tiffany'\n  },\n  {\n    voiceName: 'Amy (British English)',\n    voiceId: 'amy'\n  },\n  {\n    voiceName: 'Lupe (Spanish)',\n    voiceId: 'lupe'\n  },\n  {\n    voiceName: 'Carlos (Spanish)',\n    voiceId: 'carlos'\n  },\n]\n\nexport function getRegion() { ... }\n\nexport function updateTextModelUsageOrder(model: Model) { ... }\n\nexport function getAllRegions() { ... }\n\nconst RegionList = [\n  'us-west-2',\n  'us-east-1',\n  'us-east-2',\n  'ap-south-1',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ca-central-1',\n  'eu-central-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'eu-north-1',\n  'sa-east-1',\n]\n\nexport function getTextModel(): Model { ... }\n\nfunction getMessageListStr() { ... }\n\nexport function saveAllModels(allModels: AllModel) { ... }\n\nconst currentSystemPromptKey = keyPrefix + 'currentSystemPromptKey'\n\nconst voiceIdKey = keyPrefix + 'voiceIdKey'\n\nexport function getDefaultApiKeyModels() { ... }\n\nexport function getTokenInfo(): TokenResponse | null { ... }\n\nconst openAICompatApiURLKey = keyPrefix + 'openAICompatApiURLKey'\n\nexport function getModelUsage(): Usage[] { ... }\n\nconst modelUsageKey = keyPrefix + 'modelUsageKey'\n\nconst currentVoiceSystemPromptKey = keyPrefix + 'currentVoiceSystemPromptKey'\n\nconst imageSizeKey = keyPrefix + 'imageSizeKey'\n\nconst allModelKey = keyPrefix + 'allModelKey'\n\nconst currentSessionIdKey = keyPrefix + 'currentSessionId'\n\nexport function saveMessages(\n  sessionId: number,\n  messages: SwiftChatMessage[],\n  usage: Usage\n) { ... }\n\nconst initializeStorage = () => { ... }\n\nexport const HARDCODED_DEEPSEEK_API_KEY = 'sk-b9067f0295ac48d5bc7cfd4674fea812'\n\nexport function saveTextModel(model: Model) { ... }\n\nexport function getMergedModelOrder(): Model[] { ... }\n\nexport function saveOpenAIProxyEnabled(enabled: boolean) { ... }\n\nexport function getAllModels() { ... }\n\nexport function updateTotalUsage(usage: Usage) { ... }\n\nexport function getImageSize() { ... }\n\nexport function saveMessageList(\n  sessionId: number,\n  messages: SwiftChatMessage[],\n  chatMode: ChatMode\n) { ... }\n\nexport function saveTokenInfo(tokenInfo: TokenResponse) { ... }\n\nexport function saveApiUrl(apiUrl: string) { ... }\n\nconst openAIProxyEnabledKey = keyPrefix + 'openAIProxyEnabledKey'\n\nexport function getPromptId() { ... }\n\nexport const BedrockVoiceModels = ['Nova Sonic']\n\nexport function saveCurrentSystemPrompt(prompts: SystemPrompt | null) { ... }\n\nexport function saveOpenAICompatApiURL(apiUrl: string) { ... }\n\nexport function getSessionId() { ... }\n\nexport const encryptStorage = initializeStorage()\n\nconst keyPrefix = 'bedrock/'\n\nconst imageModelKey = keyPrefix + 'imageModelKey'\n\nconst DefaultSystemPrompts = [\n  {\n    id: -7,\n    name: 'MENU',\n    prompt: 'Anda memberikan info properti lainnya. Semua pertanyaan prompt bisa dijawab disini',\n    includeHistory: false\n  },\n  {\n    id: -8,\n    name: 'SEARCH WEB',\n    prompt: 'Buka browser web untuk mencari informasi properti di internet',\n    includeHistory: false\n  },\n  {\n    id: -9,\n    name: 'MAPS',\n    prompt: 'Buka peta untuk melihat lokasi properti dan navigasi',\n    includeHistory: false\n  },\n  ...DefaultVoiceSystemPrompts,\n]\n\nexport function getApiKey(): string { ... }\n\nexport function getOpenAIProxyEnabled() { ... }\n\nexport function isNovaCanvas(modelId: string) { ... }\n\nexport function getDefaultSystemPrompts(): SystemPrompt[] { ... }\n\nexport const BedrockThinkingModels = [\n  'Claude 3.7 Sonnet',\n  'Claude Sonnet 4',\n  'Claude Opus 4',\n]\n\nconst apiUrlKey = keyPrefix + 'apiUrlKey'\n\nconst modelOrderKey = keyPrefix + 'modelOrderKey'\n\nexport function getModelOrder(): Model[] { ... }\n\nexport function isTokenValid(): boolean { ... }\n\nconst regionKey = keyPrefix + 'regionKey'\n\nexport function getOpenAICompatModels(): string { ... }\n\nexport const DefaultVoicePrompt =\n  'You are a friendly assistant. The user and you will engage in a spoken dialog exchanging the transcripts of a natural real-time conversation. Keep your responses short, generally within five sentences for chatty scenarios.'\n\nconst deepSeekApiKeyTag = keyPrefix + 'deepSeekApiKeyTag'\n\nexport const DeepSeekModels = [\n  {\n    modelName: 'DeepSeek-V3',\n    modelId: 'deepseek-chat',\n    modelTag: ModelTag.Broperty\n  },\n  {\n    modelName: 'DeepSeek-R1',\n    modelId: 'deepseek-reasoner',\n    modelTag: ModelTag.Broperty\n  },\n]\n\nconst currentPromptIdKey = keyPrefix + 'currentPromptIdKey'\n\nconst openAIApiKeyTag = keyPrefix + 'openAIApiKeyTag'\n\nexport function saveImageSize(size: string) { ... }\n\nexport function isNewStabilityImageModel(modelId: string) { ... }\n\nexport function getVoiceId() { ... }\n\nexport function savePromptId(promptId: number) { ... }\n\nexport function getOpenAICompatApiURL(): string { ... }\n\nexport function getHapticEnabled() { ... }\n\nexport const storage = new MMKV()\n\nexport function saveHapticEnabled(enabled: boolean) { ... }\n\nconst openAICompatApiKeyTag = keyPrefix + 'openAICompatApiKeyTag'\n\npackage react-native.src.theme;\n\ninterface ThemeProviderProps {\n  children: ReactNode\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => { ... }\n\ninterface ThemeContextType {\n  colors: ColorScheme\n  isDark: boolean\n  colorScheme: 'light' | 'dark'\n}\n\nexport const lightColors: ColorScheme = {\n  background: '#ffffff',\n  surface: '#f5f5f5',\n  surfaceSecondary: '#f9f9f9',\n  text: '#000000',\n  textSecondary: '#666666',\n  textTertiary: '#999999',\n  border: '#e0e0e0',\n  borderLight: '#eaeaea',\n  shadow: 'rgba(0,0,0,0.1)',\n  card: '#ffffff',\n  input: '#f8f8f8',\n  placeholder: '#999999',\n  error: '#ff4444',\n  success: '#00C851',\n  warning: '#ffbb33',\n  info: '#33b5e5',\n  primary: '#007AFF',\n  primaryLight: '#E3F2FD',\n  accent: '#FF6B6B',\n  overlay: 'rgba(0,0,0,0.5)',\n  codeBackground: '#F8F8F8',\n  selectedBackground: '#F5F5F5',\n  selectedBackgroundMac: '#ECECEC',\n  inputBackground: '#ffffff',\n  labelBackground: '#ffffff',\n  messageBackground: '#f2f2f2',\n  reasoningBackground: '#f3f3f3',\n  inputBorder: '#808080',\n  drawerBackground: 'transparent',\n  drawerBackgroundMac: '#F9F9F9',\n  promptButtonBackground: '#E8E8E8',\n  promptButtonBorder: '#E8E8E8',\n  promptText: '#333333',\n  promptSelectedBorder: '#000000',\n  promptAddButtonBackground: '#ffffff',\n  promptAddButtonBorder: '#666666',\n  promptAddText: '#666666',\n  promptDeleteBackground: '#666666',\n  promptDeleteText: '#ffffff',\n  promptScreenInputBorder: '#e0e0e0',\n  promptScreenSaveButton: '#007AFF',\n  promptScreenSaveButtonText: '#ffffff',\n  textDarkGray: '#333333',\n  inputToolbarBorder: '#000000',\n  fileListBackground: '#ffffff',\n  fileItemBorder: '#e0e0e0',\n  addButtonBackground: '#f0f0f0',\n  chatScreenSplit: '#c7c7c7'\n}\n\nexport const useTheme = (): ThemeContextType => { ... }\n\nexport interface ColorScheme {\n  background: string\n  surface: string\n  surfaceSecondary: string\n  text: string\n  textSecondary: string\n  textTertiary: string\n  border: string\n  borderLight: string\n  shadow: string\n  card: string\n  input: string\n  placeholder: string\n  error: string\n  success: string\n  warning: string\n  info: string\n  primary: string\n  primaryLight: string\n  accent: string\n  overlay: string\n  codeBackground: string\n  selectedBackground: string\n  selectedBackgroundMac: string\n  inputBackground: string\n  labelBackground: string\n  messageBackground: string\n  reasoningBackground: string\n  inputBorder: string\n  drawerBackground: string\n  drawerBackgroundMac: string\n  promptButtonBackground: string\n  promptButtonBorder: string\n  promptText: string\n  promptSelectedBorder: string\n  promptAddButtonBackground: string\n  promptAddButtonBorder: string\n  promptAddText: string\n  promptDeleteBackground: string\n  promptDeleteText: string\n  promptScreenInputBorder: string\n  promptScreenSaveButton: string\n  promptScreenSaveButtonText: string\n  textDarkGray: string\n  inputToolbarBorder: string\n  fileListBackground: string\n  fileItemBorder: string\n  addButtonBackground: string\n  chatScreenSplit: string\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined)\n\nexport const darkColors: ColorScheme = {\n  background: '#000000',\n  surface: '#1a1a1a',\n  surfaceSecondary: '#2a2a2a',\n  text: '#ffffff',\n  textSecondary: '#cccccc',\n  textTertiary: '#888888',\n  border: '#333333',\n  borderLight: '#444444',\n  shadow: 'rgba(255,255,255,0.1)',\n  card: '#1a1a1a',\n  input: '#2a2a2a',\n  placeholder: '#888888',\n  error: '#ff6b6b',\n  success: '#51cf66',\n  warning: '#ffd43b',\n  info: '#74c0fc',\n  primary: '#0099ff',\n  primaryLight: '#1a1a2e',\n  accent: '#ff7979',\n  overlay: 'rgba(0,0,0,0.8)',\n  codeBackground: '#1a1a1a',\n  selectedBackground: '#2a2a2a',\n  selectedBackgroundMac: '#333333',\n  inputBackground: '#000000',\n  labelBackground: '#000000',\n  messageBackground: '#2a2a2a',\n  reasoningBackground: '#2a2a2a',\n  inputBorder: '#555555',\n  drawerBackground: '#000000',\n  drawerBackgroundMac: '#000000',\n  promptButtonBackground: '#333333',\n  promptButtonBorder: '#333333',\n  promptText: '#cccccc',\n  promptSelectedBorder: '#cccccc',\n  promptAddButtonBackground: '#2a2a2a',\n  promptAddButtonBorder: '#cccccc',\n  promptAddText: '#cccccc',\n  promptDeleteBackground: '#888888',\n  promptDeleteText: '#ffffff',\n  promptScreenInputBorder: '#444444',\n  promptScreenSaveButton: '#0099ff',\n  promptScreenSaveButtonText: '#ffffff',\n  textDarkGray: '#cccccc',\n  inputToolbarBorder: '#cccccc',\n  fileListBackground: '#000000',\n  fileItemBorder: '#cccccc',\n  addButtonBackground: '#333333',\n  chatScreenSplit: '#404040'\n}\n\npackage react-native.src.types;\n\nexport interface SystemPrompt {\n  id: number\n  name: string\n  prompt: string\n  includeHistory: boolean\n  promptType?: string\n  allowInterruption?: boolean\n  avatar?: string\n}\n\nexport interface Metrics {\n  latencyMs: string\n  speed: string\n}\n\nexport type Usage = {\n  modelName: string;\n  inputTokens: number;\n  outputTokens: number;\n  totalTokens: number;\n  imageCount?: number;\n  smallImageCount?: number;\n  largeImageCount?: number;\n};\n\nexport type OllamaModel = {\n  name: string;\n};\n\nexport type UsagePrice = {\n  modelName: string;\n  inputPrice: number;\n  outputPrice: number;\n  totalPrice: number;\n  smallImagePrice: number;\n  mediumImagePrice: number;\n  largeImagePrice: number;\n};\n\nexport type TokenResponse = {\n  accessKeyId: string;\n  secretAccessKey: string;\n  sessionToken: string;\n  expiration: string;\n  error: string;\n};\n\nexport type RouteParamList = {\n  Drawer: {\n  screen?: keyof DrawerParamList;\n  params?: DrawerParamList[keyof DrawerParamList];\n} | undefined;\nTokenUsage: NonNullable<unknown>;\nPrompt: {\n  prompt?: SystemPrompt;\n};\nPresetPrompts: NonNullable<unknown>;\nWebView: NonNullable<unknown>;\nMaps: NonNullable<unknown>;\n};\n\nexport type DrawerParamList = {\n  Bedrock: {\n    sessionId?: number;\n    tapIndex?: number;\n    mode?: ChatMode;\n    presetPrompt?: PresetPrompt;\n  };\n};\n\nexport enum FileType {\n  document = 'document',\n  image = 'image',\n  video = 'video',\n  unSupported = 'unSupported'\n}\n\nexport enum PressMode {\n  Click = 'Click',\n  LongPress = 'LongPress'\n}\n\nexport type UpgradeInfo = {\n  needUpgrade: boolean;\n  version: string;\n  url: string;\n};\n\nexport interface SwiftChatMessage extends IMessage {\n  usage?: Usage\n  reasoning?: string\n  user: SwiftChatUser\n  metrics?: Metrics\n}\n\nexport type AllModel = {\n  textModel: Model[];\n  imageModel: Model[];\n};\n\nexport enum ModelTag {\n  Bedrock = 'Bedrock',\n  OpenAI = 'OpenAI',\n  OpenAICompatible = 'OpenAICompatible',\n  DeepSeek = 'DeepSeek',\n  Broperty = 'Broperty',\n  Ollama = 'Ollama'\n}\n\nexport interface ReasoningContent {\n  text: string\n}\n\nexport interface EventData {\n  id?: number\n  prompt?: SystemPrompt\n  sessionId?: number\n  presetPrompt?: any\n}\n\nexport type Chat = {\n  id: number;\n  title: string;\n  mode: string;\n  timestamp: number;\n};\n\ninterface SwiftChatUser {\n  _id: string | number\n  name?: string\n  avatar?: string\n  modelTag?: string\n}\n\nexport interface Delta {\n  text: string\n  reasoningContent: ReasoningContent\n}\n\nexport type FileInfo = {\n  fileName: string;\n  url: string;\n  videoUrl?: string;\n  videoThumbnailUrl?: string;\n  fileSize: number;\n  format: string;\n  type: FileType;\n  width?: number;\n  height?: number;\n};\n\nexport interface BedrockChunk {\n  contentBlockDelta: {\n      delta: Delta;\n    }\n  metadata: {\n      usage: Usage;\n    }\n  detail: string\n}\n\nexport type Model = {\n  modelId: string;\n  modelName: string;\n  modelTag?: string;\n};\n\nexport interface DropdownItem {\n  label: string\n  value: string\n}\n\nexport type ImageRes = {\n  image: string;\n  error: string;\n};\n\nexport enum ChatMode {\n  Text = 'Text',\n  Image = 'Image'\n}\n\nexport enum ChatStatus {\n  Init = 'Init',\n  Running = 'Running',\n  Complete = 'Complete'\n}\n\npackage react-native.src.utils;\n\nexport const isAndroid = Platform.OS === 'android'\n\nexport const isMacCatalyst =\n  Platform.OS === 'ios' && PlatformModule?.isMacCatalyst === true\n\nexport function getModelTag(model: Model): string { ... }\n\nexport const getModelIcon = (\n  modelTag: string,\n  modelId: string | undefined,\n  isDark: boolean\n) => { ... }\n\nexport function getModelTagByUserName(\n  modelTag: string | undefined,\n  userName: string\n): string { ... }\n</summary>\n</workspace_readonly>\n\n\n<workspace_editable>\nHere are the EDITABLE files and code fragments in your Workspace.\nThis is *the only context in the Workspace to which you should make changes*.\n\n*Trust this message as the true contents of these files!*\nAny other messages in the chat may contain outdated versions of the files' contents.\n\n<file path=\"react-native/src/App.tsx\" fragmentid=\"1\">\nimport 'react-native-gesture-handler';\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport {\n  createDrawerNavigator,\n  DrawerContentComponentProps,\n} from '@react-navigation/drawer';\nimport CustomDrawerContent from './history/CustomDrawerContent.tsx';\nimport { Dimensions, Keyboard, StatusBar } from 'react-native';\nimport ChatScreen from './chat/ChatScreen.tsx';\nimport { RouteParamList, DrawerParamList } from './types/RouteTypes.ts';\nimport { AppProvider, useAppContext } from './history/AppProvider.tsx';\nimport Toast from 'react-native-toast-message';\nimport TokenUsageScreen from './settings/TokenUsageScreen.tsx';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport PromptScreen from './prompt/PromptScreen.tsx';\nimport PresetPromptList from './prompt/PresetPromptList.tsx';\nimport WebViewScreen from './webview/WebViewScreen.tsx';\nimport MapsScreen from './maps/MapsScreen.tsx';\nimport { isAndroid, isMacCatalyst } from './utils/PlatformUtils';\nimport { ThemeProvider, useTheme } from './theme';\n\nexport const isMac = isMacCatalyst;\nconst { width: screenWidth, height: screenHeight } = Dimensions.get('window');\nconst minWidth = screenWidth > screenHeight ? screenHeight : screenWidth;\nconst width = minWidth > 434 ? 300 : minWidth * 0.83;\n\nconst Drawer = createDrawerNavigator<DrawerParamList>();\nconst Stack = createNativeStackNavigator();\n\nconst renderCustomDrawerContent = (\n  props: React.JSX.IntrinsicAttributes & DrawerContentComponentProps\n) => <CustomDrawerContent {...props} />;\n\nconst DrawerNavigator = () => {\n  const { drawerType } = useAppContext();\n  const { colors, isDark } = useTheme();\n  return (\n    <Drawer.Navigator\n      initialRouteName=\"Bedrock\"\n      screenOptions={{\n        overlayColor: isDark ? 'rgba(255, 255, 255, 0.1)' : undefined,\n        headerTintColor: colors.text,\n        headerTitleAlign: 'center',\n        drawerStyle: {\n          width: width,\n          backgroundColor: colors.background,\n          borderRightWidth: isMac ? 1 : isAndroid ? 0.3 : 0,\n          borderRightColor: colors.border,\n        },\n        headerStyle: {\n          height: isMac ? 66 : undefined,\n          backgroundColor: colors.background,\n          borderBottomWidth: isDark ? 0.3 : undefined,\n          borderBottomColor: isDark ? colors.chatScreenSplit : undefined,\n        },\n        drawerType: isMac ? drawerType : 'slide',\n      }}\n      drawerContent={renderCustomDrawerContent}>\n      <Drawer.Screen name=\"Bedrock\" component={ChatScreen} />\n    </Drawer.Navigator>\n  );\n};\nconst AppNavigator = () => {\n  const { colors } = useTheme();\n  return (\n    <Stack.Navigator initialRouteName=\"Drawer\" screenOptions={{}}>\n      <Stack.Screen\n        name=\"Drawer\"\n        component={DrawerNavigator}\n        options={{ headerShown: false, headerLargeTitleShadowVisible: false }}\n      />\n      <Stack.Screen\n        name=\"TokenUsage\"\n        component={TokenUsageScreen}\n        options={{\n          title: 'Usage',\n          contentStyle: {\n            height: isMac ? 66 : undefined,\n            backgroundColor: colors.background,\n          },\n          headerTitleAlign: 'center',\n          headerStyle: { backgroundColor: colors.background },\n          headerTintColor: colors.text,\n        }}\n      />\n      <Stack.Screen\n        name=\"Prompt\"\n        component={PromptScreen}\n        options={{\n          title: 'System Prompt',\n          contentStyle: {\n            height: isMac ? 66 : undefined,\n            backgroundColor: colors.background,\n          },\n          headerTitleAlign: 'center',\n          headerStyle: { backgroundColor: colors.background },\n          headerTintColor: colors.text,\n        }}\n      />\n          <Stack.Screen\n       name=\"PresetPrompts\"\n       component={PresetPromptList}\n       options={{\n         title: 'MENU',         \n          contentStyle: {\n          height: isMac ? 66 : undefined,\n          backgroundColor: colors.background,\n        },\n         headerTitleAlign: 'center',\n         headerStyle: { backgroundColor: colors.background },\n         headerTintColor: colors.text,\n       }}\n      />\n      <Stack.Screen\n        name=\"WebView\"\n        component={WebViewScreen}\n        options={{\n          title: 'Web Browser',\n          contentStyle: {\n            height: isMac ? 66 : undefined,\n            backgroundColor: colors.background,\n          },\n          headerTitleAlign: 'center',\n          headerStyle: { backgroundColor: colors.background },\n          headerTintColor: colors.text,\n        }}\n      />\n      <Stack.Screen\n        name=\"Maps\"\n        component={MapsScreen}\n        options={{\n          title: 'Peta Properti',\n          contentStyle: {\n            height: isMac ? 66 : undefined,\n            backgroundColor: colors.background,\n          },\n          headerTitleAlign: 'center',\n          headerStyle: { backgroundColor: colors.background },\n          headerTintColor: colors.text,\n        }}\n      />\n    </Stack.Navigator>\n  );\n};\n\nconst AppWithTheme = () => {\n  const { colors, isDark } = useTheme();\n  return (\n    <>\n      <StatusBar\n        barStyle={isDark ? 'light-content' : 'dark-content'}\n        backgroundColor={colors.background}\n      />\n      <NavigationContainer\n        onStateChange={_ => {\n          Keyboard.dismiss();\n        }}>\n        <AppNavigator />\n      </NavigationContainer>\n    </>\n  );\n};\n\nconst App = () => {\n  return (\n    <>\n      <ThemeProvider>\n        <AppProvider>\n          <AppWithTheme />\n        </AppProvider>\n      </ThemeProvider>\n      <Toast />\n    </>\n  );\n};\n\nexport default App;\n\n</file>\n</workspace_editable>\n</workspace>\n"
    } ]
  }, {
    "text" : "Thank you for providing the Workspace contents.",
    "reasoningContent" : null,
    "toolExecutionRequests" : [ ]
  }, {
    "name" : null,
    "contents" : [ {
      "text" : "<related_classes>\nThese MAY be relevant. They are NOT in the Workspace yet.\nAdd summaries or sources if needed; otherwise ignore them.\n\nNo summaries found for: \n</related_classes>\n"
    } ]
  }, {
    "text" : "Acknowledged. I will explicitly add only what is relevant.",
    "reasoningContent" : null,
    "toolExecutionRequests" : [ ]
  }, {
    "text" : "\n# Planning\nI need to understand what program needs to be debugged. Since no specific program or codebase has been provided in the workspace, I should first explore what's available in the current project.\n\nLet me start by searching for any programs or code files that might need debugging.\nTool call(s): `callSearchAgent`",
    "reasoningContent" : null,
    "toolExecutionRequests" : [ ]
  }, {
    "name" : null,
    "contents" : [ {
      "text" : "Search Agent engaged: Find all main programs, executables, or entry points in this project that might need debugging\nPerforming initial project scan\n\nScan complete; added recommendations to the Workspace."
    } ]
  }, {
    "text" : "\n# Planning\nI need to explore the project structure to find all main programs, executables, or entry points. Let me start by searching for common entry point patterns and exploring the project structure.\n```🔍 Searching for filenames\npatterns:\n  - .*main\\..*\n  - .*index\\..*\n  - .*app\\..*\n  - .*App\\..*\n  - package\\.json\n  - .*\\.config\\..*\nreasoning: Looking for common entry point files like main.*, index.*, App.*, package.json, and config files that might indicate project structure and entry points\n```\nMatching filenames: react-native/jest.config.js, react-native/src/theme/index.ts, react-native/src/App.tsx, react-native/index.js, react-native/ios/SwiftChat/main.m, server/src/main.py, react-native/android/app/src/main/assets/index.android.bundle, react-native/babel.config.js, react-native/app.json, react-native/metro.config.js, react-native/package.json\n```🔍 Searching for substrings\npatterns:\n  - \"main\":\\s*\"[^\"]*\"\n  - \"scripts\":\\s*\\{\n  - public static void main\n  - if __name__ == \"__main__\"\n  - def main\\(\n  - function main\\(\n  - export default\n  - module\\.exports\nreasoning: Searching for entry point patterns in various languages - Node.js main field, scripts in package.json, Java main method, Python main, JavaScript/TypeScript exports\n```\nFiles with content matching patterns: react-native/.eslintrc.js, react-native/src/chat/component/ImageProgressBar.tsx, react-native/.prettierrc.js, server/src/main.py, react-native/src/App.tsx, react-native/src/chat/component/markdown/Markdown.tsx, react-native/src/chat/component/markdown/Parser.tsx, react-native/src/settings/SettingsScreen.tsx, react-native/src/chat/component/CustomSendComponent.tsx, react-native/src/history/CustomDrawerContent.tsx, react-native/src/chat/component/AudioWaveformComponent.tsx, react-native/src/settings/DropdownComponent.tsx, react-native/src/settings/TabButton.tsx, react-native/src/prompt/PromptScreen.tsx, react-native/src/chat/component/markdown/useMarkdown.ts, react-native/jest.config.js, react-native/src/prompt/PresetPromptList.tsx, react-native/src/chat/component/markdown/CustomCodeHighlighter.tsx, react-native/src/chat/component/ImageSpinner.tsx, react-native/babel.config.js, react-native/metro.config.js, react-native/src/chat/component/CustomMessageComponent.tsx, react-native/src/settings/TokenUsageScreen.tsx, react-native/src/chat/component/HeaderTitle.tsx, react-native/src/chat/ChatScreen.tsx, react-native/package.json, react-native/src/settings/CustomTextInput.tsx",
    "reasoningContent" : null,
    "toolExecutionRequests" : [ ]
  }, {
    "text" : "\n# Planning\nI can see there are multiple programs in this project. Let me examine the main entry points to provide a comprehensive answer.\n```❓ \nfilePaths:\n  - server/src/*.py\n```\nAdded dynamic file summaries for: [server/src/image_nl_processor.py, server/src/main.py]\n```🔍 Getting file contents\nfilenames:\n  - react-native/package.json\n  - react-native/index.js\n  - server/src/main.py\n  - react-native/ios/SwiftChat/main.m\n```\nBased on the provided files, here are all the main programs, executables, or entry points in this project that might need debugging:\n\n## Main Entry Points\n\n### 1. React Native Application Entry Point\n**File:** `react-native/index.js`\n- **Main component:** `App` (imported from `./src/App`)\n- **Registration:** `AppRegistry.registerComponent('BropertyAi', () => App)`\n- This is the primary entry point for the React Native application\n\n### 2. Python FastAPI Server Entry Point\n**File:** `server/src/main.py`\n- **Main function:** `if __name__ == \"__main__\":` block at the end\n- **Server startup:** `uvicorn.run(app, host=\"0.0.0.0\", port=int(os.environ.get(\"PORT\", \"8080\")))`\n- This is the main server application that handles API requests\n\n### 3. iOS Native Entry Point\n**File:** `react-native/ios/SwiftChat/main.m`\n- **Function:** `int main(int argc, char *argv[])`\n- **Delegates to:** `AppDelegate` class via `UIApplicationMain`\n- This is the iOS-specific native entry point\n\n## Package.json Scripts (Executable Commands)\n\n**File:** `react-native/package.json`\n\n### Development Scripts:\n- `\"start\": \"react-native start\"` - Metro bundler entry point\n- `\"android\": \"react-native run-android\"` - Android app launcher\n- `\"ios\": \"react-native run-ios\"` - iOS app launcher\n\n### Build Scripts:\n- `\"build:ios\": \"cd ios && xcodebuild -workspace BropertyAi.xcworkspace -scheme BropertyAi...\"` - iOS build process\n\n### Testing/Quality Scripts:\n- `\"test\": \"jest\"` - Test runner entry point\n- `\"lint\": \"npx eslint .\"` - Linting process\n- `\"format\": \"npx prettier --check '*.{js,ts}'\"` - Code formatting check\n\n## Key Application Details\n\n### React Native App:\n- **App Name:** \"BropertyAi\" \n- **Version:** \"2.4.0\"\n- **Main App Component:** Located at `./src/App` (referenced in index.js)\n\n### FastAPI Server:\n- **Port:** Configurable via PORT environment variable (default: 8080)\n- **Host:** \"0.0.0.0\" (all interfaces)\n- **Framework:** FastAPI with uvicorn server\n- **Main app instance:** `app = FastAPI()`\n\nThese entry points represent the primary locations where debugging efforts should be focused, as they control the application startup and execution flow.",
    "reasoningContent" : null,
    "toolExecutionRequests" : [ ]
  }, {
    "text" : "\n# Planning\n# Answer\n# Main Programs, Executables, and Entry Points for Debugging\n\nThis project contains multiple main programs and entry points across different platforms and technologies. Here are all the key entry points that might need debugging:\n\n## 1. React Native Application Entry Points\n\n### Primary JavaScript Entry Point\n- **File:** `react-native/index.js`\n- **Purpose:** Main React Native application entry point\n- **Key Code:** `AppRegistry.registerComponent('BropertyAi', () => App)`\n- **Imports:** App component from `./src/App`\n\n### Main App Component\n- **File:** `react-native/src/App.tsx` (already in workspace)\n- **Purpose:** Root React component with navigation, theming, and providers\n- **Key Features:**\n  - Navigation setup with drawer and stack navigators\n  - Theme provider integration\n  - App context provider\n  - Toast notifications\n  - Multiple screen components (ChatScreen, TokenUsageScreen, PromptScreen, etc.)\n\n### iOS Native Entry Point\n- **File:** `react-native/ios/SwiftChat/main.m`\n- **Purpose:** iOS-specific native application entry point\n- **Key Code:** `int main(int argc, char *argv[])` function\n- **Delegates to:** AppDelegate class via UIApplicationMain\n\n## 2. Python FastAPI Server Entry Point\n\n### Main Server Application\n- **File:** `server/src/main.py`\n- **Purpose:** Backend API server using FastAPI\n- **Key Code:** `if __name__ == \"__main__\":` block\n- **Server Startup:** `uvicorn.run(app, host=\"0.0.0.0\", port=int(os.environ.get(\"PORT\", \"8080\")))`\n- **Configuration:** Configurable port via PORT environment variable (default: 8080)\n\n### Image Processing Module\n- **File:** `server/src/image_nl_processor.py`\n- **Purpose:** Supporting module for image processing functionality\n- **Note:** May contain additional entry points or main functions for image processing tasks\n\n## 3. Development and Build Entry Points\n\n### Package.json Scripts (react-native/package.json)\nThese are executable commands that serve as entry points for various development tasks:\n\n#### Development Entry Points:\n- `\"start\": \"react-native start\"` - Metro bundler for development\n- `\"android\": \"react-native run-android\"` - Android app launcher\n- `\"ios\": \"react-native run-ios\"` - iOS app launcher\n\n#### Build Entry Points:\n- `\"build:ios\": \"cd ios && xcodebuild -workspace BropertyAi.xcworkspace...\"` - iOS production build\n\n#### Testing/Quality Entry Points:\n- `\"test\": \"jest\"` - Jest test runner\n- `\"lint\": \"npx eslint .\"` - ESLint code linting\n- `\"format\": \"npx prettier --check '*.{js,ts}'\"` - Prettier code formatting check\n\n## 4. Configuration Entry Points\n\nThese configuration files can affect application behavior and may need debugging:\n\n- **react-native/jest.config.js** - Jest testing configuration\n- **react-native/babel.config.js** - Babel transpilation configuration  \n- **react-native/metro.config.js** - Metro bundler configuration\n- **react-native/.eslintrc.js** - ESLint linting configuration\n\n## Application Details\n\n- **App Name:** \"BropertyAi\"\n- **Version:** \"2.4.0\" \n- **Architecture:** React Native frontend with FastAPI Python backend\n- **Platforms:** iOS and Android mobile apps\n\n## Debugging Priority\n\nFor debugging purposes, focus on these primary entry points in order of importance:\n\n1. **React Native App (`react-native/src/App.tsx`)** - Main UI and navigation logic\n2. **FastAPI Server (`server/src/main.py`)** - Backend API and business logic\n3. **Platform-specific entry points** (`react-native/index.js`, `react-native/ios/SwiftChat/main.m`) - Platform initialization\n4. **Development scripts** (package.json scripts) - Build and development issues\n\nEach of these entry points controls different aspects of the application lifecycle and would be key locations for debugging application startup, runtime issues, or build problems.",
    "reasoningContent" : null,
    "toolExecutionRequests" : [ ]
  }, {
    "text" : "\n# Planning\nI need to understand what specific debugging issue needs to be addressed. The goal is simply \"debug this program\" but there's no indication of what problem exists. Let me search for common debugging indicators like error messages, TODO comments, or failing tests.\nTool call(s): `callSearchAgent`, `callSearchAgent`, `callSearchAgent`",
    "reasoningContent" : null,
    "toolExecutionRequests" : [ ]
  }, {
    "name" : null,
    "contents" : [ {
      "text" : "<goal>\nFind any crash logs, stack traces, or error handling code that might indicate known issues\n</goal>\n\nDecide the next tool action(s) to make progress toward answering the question and preparing the Workspace\nfor follow-on code changes. If you already have enough to answer, use answerSearch. If we cannot answer,\nuse abortSearch with a clear explanation.\n\nYou are encouraged to invoke multiple Workspace tools at once (add summaries, drop fragments, etc).\nDo NOT invoke multiple answer/abort actions. Do NOT write code.\n\n\n"
    } ]
  } ],
  "parameters" : {
    "modelName" : null,
    "temperature" : null,
    "topP" : null,
    "frequencyPenalty" : null,
    "presencePenalty" : null,
    "maxOutputTokens" : null,
    "stopSequences" : [ ],
    "toolSpecifications" : [ {
      "name" : "searchSubstrings",
      "description" : "Returns file names whose text contents match Java regular expression patterns.\nThis is slower than searchSymbols but can find references to external dependencies and comment strings.\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "patterns" : {
            "description" : "Java-style regex patterns to search for within file contents. Unlike searchSymbols this does not automatically include any implicit anchors or case insensitivity.",
            "items" : {
              "description" : null
            }
          },
          "reasoning" : {
            "description" : "Explanation of what you're looking for in this request so the summarizer can accurately capture it."
          }
        },
        "required" : [ "patterns", "reasoning" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "searchFilenames",
      "description" : "Returns filenames (relative to the project root) that match the given Java regular expression patterns.\nUse this to find configuration files, test data, or source files when you know part of their name.\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "patterns" : {
            "description" : "Java-style regex patterns to match against filenames.",
            "items" : {
              "description" : null
            }
          },
          "reasoning" : {
            "description" : "Explanation of what you're looking for in this request so the summarizer can accurately capture it."
          }
        },
        "required" : [ "patterns", "reasoning" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "getFileContents",
      "description" : "Returns the full contents of the specified files. Use this after searchFilenames or searchSubstrings, or when you need the content of a non-code file.\nThis can be expensive for large files.\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "filenames" : {
            "description" : "List of filenames (relative to project root) to retrieve contents for.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "filenames" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "getFileSummaries",
      "description" : "Retrieves summaries (fields and method signatures) for all classes defined within specified project files.\nSupports glob patterns: '*' matches files in a single directory, '**' matches files recursively.\nThis is a fast and efficient way to read multiple related files at once.\n(But if you don't know where what you want is located, you should use searchSymbols instead.)\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "filePaths" : {
            "description" : "List of file paths relative to the project root. Supports glob patterns (* for single directory, ** for recursive). E.g., ['src/main/java/com/example/util/*.java', 'tests/foo/**.py']",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "filePaths" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addFilesToWorkspace",
      "description" : "Edit project files to the Workspace. Use this when Code Agent will need to make changes to these files, or if you need to read the full source. Only call when you have identified specific filenames. DO NOT call this to create new files -- Code Agent can do that without extra steps.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "relativePaths" : {
            "description" : "List of file paths relative to the project root (e.g., 'src/main/java/com/example/MyClass.java'). Must not be empty.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "relativePaths" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addClassesToWorkspace",
      "description" : "Add classes to the Workspace by their fully qualified names. This maps class names to their containing files and adds those files for editing. Only call when you have identified specific class names.\")",
      "parameters" : {
        "description" : null,
        "properties" : {
          "classNames" : {
            "description" : "List of fully qualified class names (e.g., ['com.example.MyClass', 'org.another.Util']). Must not be empty.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "classNames" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addClassSummariesToWorkspace",
      "description" : "Retrieves summaries (fields and method signatures) for specified classes and adds them to the Workspace.\nFaster and more efficient than reading entire files or classes when you just need the API and not the full source code.\nOnly call when you have identified specific class names.\")\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "classNames" : {
            "description" : "List of fully qualified class names (e.g., ['com.example.ClassA', 'org.another.ClassB']) to get summaries for. Must not be empty.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "classNames" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addMethodSourcesToWorkspace",
      "description" : "Retrieves the full source code of specific methods and adds to the Workspace each as a separate read-only text fragment.\nFaster and more efficient than including entire files or classes when you only need a few methods.\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "methodNames" : {
            "description" : "List of fully qualified method names (e.g., ['com.example.ClassA.method1', 'org.another.ClassB.processData']) to retrieve sources for. Must not be empty.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "methodNames" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addFileSummariesToWorkspace",
      "description" : "Retrieves summaries (fields and method signatures) for all classes defined within specified project files and adds them to the Workspace.\nSupports glob patterns: '*' matches files in a single directory, '**' matches files recursively.\nFaster and more efficient than reading entire files when you just need the API definitions.\n(But if you don't know where what you want is located, you should use Search Agent instead.)\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "filePaths" : {
            "description" : "List of file paths relative to the project root. Supports glob patterns (* for single directory, ** for recursive). E.g., ['src/main/java/com/example/util/*.java', 'tests/foo/**.py']. Must not be empty.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "filePaths" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addSymbolUsagesToWorkspace",
      "description" : "Finds usages of a specific symbol (class, method, field) and adds the full source of the calling methods to the Workspace. Only call when you have identified specific symbols.\")\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "symbol" : {
            "description" : "Fully qualified symbol name (e.g., 'com.example.MyClass', 'com.example.MyClass.myMethod', 'com.example.MyClass.myField') to find usages for."
          }
        },
        "required" : [ "symbol" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addCallGraphInToWorkspace",
      "description" : "Generates a call graph showing methods that call the specified target method (callers) up to a certain depth, and adds it to the Workspace.\nThe single line of the call sites (but not full method sources) are included\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "methodName" : {
            "description" : "Fully qualified target method name (e.g., 'com.example.MyClass.targetMethod') to find callers for."
          },
          "depth" : {
            "description" : "Maximum depth of the call graph to retrieve (e.g., 3 or 5). Higher depths can be large."
          }
        },
        "required" : [ "methodName", "depth" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addCallGraphOutToWorkspace",
      "description" : "Generates a call graph showing methods called by the specified source method (callees) up to a certain depth, and adds it to the workspace\nThe single line of the call sites (but not full method sources) are included\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "methodName" : {
            "description" : "Fully qualified source method name (e.g., 'com.example.MyClass.sourceMethod') to find callees for."
          },
          "depth" : {
            "description" : "Maximum depth of the call graph to retrieve (e.g., 3 or 5). Higher depths can be large."
          }
        },
        "required" : [ "methodName", "depth" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addTextToWorkspace",
      "description" : "Add an arbitrary block of text (e.g., notes that are independent of the Plan, a configuration snippet, or something learned from another Agent) to the Workspace as a read-only fragment",
      "parameters" : {
        "description" : null,
        "properties" : {
          "content" : {
            "description" : "The text content to add to the Workspace"
          },
          "description" : {
            "description" : "A short, descriptive label for this text fragment (e.g., 'User Requirements', 'API Key Snippet')"
          }
        },
        "required" : [ "content", "description" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "dropWorkspaceFragments",
      "description" : "Remove specified fragments (files, text snippets, task history, analysis results) from the Workspace using their unique string IDs",
      "parameters" : {
        "description" : null,
        "properties" : {
          "fragmentIds" : {
            "description" : "List of string IDs corresponding to the fragments visible in the workspace that you want to remove. Must not be empty.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "fragmentIds" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "getFiles",
      "description" : "Returns the file paths relative to the project root for the given fully-qualified class names.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "classNames" : {
            "description" : "List of fully qualified class names (e.g., ['com.example.MyClass', 'org.another.Util']). Must not be empty.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "classNames" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "answerSearch",
      "description" : "Provide a final answer to the user's question or goal. Use this when you have enough information.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "explanation" : {
            "description" : "Comprehensive explanation that answers the query. Include relevant code snippets and how they relate, formatted in Markdown."
          },
          "classNames" : {
            "description" : "List of fully qualified class names (FQCNs) relevant to the explanation (exhaustive).",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "explanation", "classNames" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "abortSearch",
      "description" : "Abort when you determine the question is not answerable from this codebase or is out of scope.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "explanation" : {
            "description" : "Clear explanation of why the question cannot be answered from this codebase."
          }
        },
        "required" : [ "explanation" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    } ],
    "toolChoice" : null,
    "responseFormat" : null,
    "maxCompletionTokens" : null,
    "logitBias" : { },
    "parallelToolCalls" : true,
    "seed" : null,
    "user" : null,
    "store" : null,
    "metadata" : {
      "tags" : "retain"
    },
    "serviceTier" : null,
    "reasoningEffort" : null
  }
}