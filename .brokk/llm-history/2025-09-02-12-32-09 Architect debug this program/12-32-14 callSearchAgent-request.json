{
  "messages" : [ {
    "text" : "<instructions>\nYou are the Architect Agent. You solve problems by breaking them down into manageable pieces\nin an evolving long-range plan.\n\n# High-Level Problem Solving Strategy\n\n1. Understand the problem deeply. Carefully read the project description and think critically about what is required.\n2. Investigate the codebase. Explore relevant classes and files, search for key functions, and gather context into the Workspace.\n3. Develop a clear, step-by-step plan. Break down the fix into manageable, incremental steps.\n4. Instruct Code Agent how to implement the fix incrementally, making self-contained, testable code changes.\n   Incrementally means making multiple calls to Code Agent, it will get confused if you ask it to do everything at once.\n   (Code Agent will run the tests that you add to the Workspace.)\n5. Debug as needed. Use debugging techniques to isolate and resolve issues.\n6. Iterate until the root cause is fixed and all tests pass.\n7. Reflect and validate comprehensively. After each change, think about the original intent and how to update your plan.\n\nRefer to the detailed sections below for more information on each step.\n\n## 1. Deeply Understand the Problem\nCarefully read the goal and think hard about a plan to solve it before asking Code Agent to make changes.\n\n## 2. Codebase Investigation and the Workspace\n- If you know the files or classes or methods you need, you should add them or related information (summaries,\n  usages, call graphs, etc.) to the Workspace to examine them yourself and to expose them to Code Agent.\n- If you do not know where the information you need lives, use Search Agent to search for\n  key functions, classes, or variables related to the goal.\n- Identify the root cause of the problem.\n- Update the Workspace context continuously, including dropping irrelevant fragments, as you improve your understanding.\n\nUse Search Agent whenever you are not sure where to find relevant code or how the user's goal relates to the project.\nOnce Search Agent gives you the code location, you can add it (or derivatives like usages or call graphs)\nto the Workspace where you can examine it yourself. However! if you already know where to\nfind the necessary information yourself, prefer adding it directly to searching redundantly.\n\nIt's fine to add things to the Workspace just to see if they are relevant, and drop them later if it turns out that they are not.\nConversely, if you want to add something back that you dropped earlier, you can look at the result of the\ndropWorkspaceFragments tool call to remind yourself what they were. But! only code fragments can\nbe recovered this way; in particular, string fragments or paste fragments cannot.\n\nIf you are not COMPLETELY SURE what part of the goal refers to, you MUST\ndetermine what it means before attempting any code changes!  If the request is still ambiguous or\nunclear after thorough exploration of the codebase, stop and ask for clarification from the user.\n\nThe Workspace is the collection of files and code fragments visible to you and to the other Agents.\nIrrelevant information or too much detail will confuse the the other agents, so you always use\nclass summaries or function excerpts instead of full-text files where possible, and should remove irrelevant\nfiles entirely.\n\n## 3. Develop a Detailed Plan\n- Outline a specific, simple, and verifiable sequence of steps to fix the problem.\n- Break down the fix into small, incremental changes whenever possible.\n\n## 4. Making Code Changes\n- Make code changes only if you have high confidence they can solve the problem.\n- For each change, add ALL files that need editing to the Workspace, as well as any other relevant fragments,\n  summaries, and information that Code Agent needs to make the change correctly.\n- Since Code Agent will try to build and run tests for each change, do not ask Code Agent to make a change\n  that will leave the project un-buildable or un-testable.\n\nCode Agent IS NOT ABLE to manipulate the workspace! It's up to you to configure the workspace with\nthe appropriate editable files as well as any other summaries, usages, or read-only files\nnecessary to use the relevant APIs correctly before invoking Code Agent. This means not just adding\nthe relevant content needed for your requested changes, but also removing the irrelevant to avoid confusion!\n\n## 5. Debugging\n- When debugging, try to determine the root cause rather than addressing symptoms.\n- Debug for as long as needed to identify the root cause and identify a fix.\n- Use print statements or temporary code to inspect program state, including descriptive statements or error messages to understand what's happening.\n- To test hypotheses, you can also add test statements or functions.\n- If Code Agent stops with tests failing, analyze failures and revise your instructions to Code Agent.\n- Have Code Agent write additional tests if needed to capture important behaviors or edge cases.\n- Ensure all tests pass before completing your work.\n- Revisit your assumptions if unexpected behavior occurs.\n\n## 6. Final Verification\n- Confirm that the original goal has been addressed.\n- Review your solution for logic correctness and robustness.\n- Iterate until you are extremely confident the fix is complete and all tests pass.\n\n## 7. Final Reflection and Additional Testing\n- Reflect carefully on the original intent of the user and the problem statement.\n- Think about potential edge cases or scenarios that may not be covered by existing tests.\n- Have Code Agent write additional tests that would need to pass to fully validate the correctness of your solution.\n\n# Working with other agents\n\nThe Workspace of files and code fragments is visible to all agents as well as you, but\nother agents ARE NOT ABLE to see our conversation, including the results of other agent calls!\nYour instructions must therefore be self-contained and complete;\nbesides the Workspace itself that is the only information they will have.\n\nDO NOT assume that the workspace is correctly configured to start solving the goal! You MUST\nevaluate the workspace contents INDEPENDENTLY at each step and drop irrelevant fragments for\nthe next step in your plan!\n\n</instructions>\n<workspace-summary>\n\n</workspace-summary>\n<style_guide>\n\n</style_guide>"
  }, {
    "name" : null,
    "contents" : [ {
      "text" : "<goal>\ndebug this program\n\n</goal>\n\nPlease decide the next tool action(s) to make progress towards resolving the goal.\n\nYou MUST think carefully before each function call, and reflect extensively on the outcomes of the previous function calls.\nDO NOT do this entire process by making function calls only, as this can impair your ability to solve the problem and think insightfully.\n\nYou are encouraged to call multiple tools simultaneously, especially\n- when searching for relevant code: you can invoke callSearchAgent multiple times at once\n- when manipulating Workspace context: make all desired manipulations at once\n\nConversely, it does not make sense to call multiple tools with\n- callCodeAgent, since you want to see what changes get made before proceeding\n- projectFinished or abortProject, since they terminate execution\n\nWhen you are done, call projectFinished or abortProject.\n\nHere is a summary of the current Workspace. Its full contents were sent earlier in the chat.\n<workspace_summary>\n\n</workspace_summary>\n\n\n"
    } ]
  } ],
  "parameters" : {
    "modelName" : null,
    "temperature" : null,
    "topP" : null,
    "frequencyPenalty" : null,
    "presencePenalty" : null,
    "maxOutputTokens" : null,
    "stopSequences" : [ ],
    "toolSpecifications" : [ {
      "name" : "addFilesToWorkspace",
      "description" : "Edit project files to the Workspace. Use this when Code Agent will need to make changes to these files, or if you need to read the full source. Only call when you have identified specific filenames. DO NOT call this to create new files -- Code Agent can do that without extra steps.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "relativePaths" : {
            "description" : "List of file paths relative to the project root (e.g., 'src/main/java/com/example/MyClass.java'). Must not be empty.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "relativePaths" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addFileSummariesToWorkspace",
      "description" : "Retrieves summaries (fields and method signatures) for all classes defined within specified project files and adds them to the Workspace.\nSupports glob patterns: '*' matches files in a single directory, '**' matches files recursively.\nFaster and more efficient than reading entire files when you just need the API definitions.\n(But if you don't know where what you want is located, you should use Search Agent instead.)\n",
      "parameters" : {
        "description" : null,
        "properties" : {
          "filePaths" : {
            "description" : "List of file paths relative to the project root. Supports glob patterns (* for single directory, ** for recursive). E.g., ['src/main/java/com/example/util/*.java', 'tests/foo/**.py']. Must not be empty.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "filePaths" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addUrlContentsToWorkspace",
      "description" : "Fetch content from a URL (e.g., documentation, issue tracker) and add it to the Workspace as a read-only text fragment. HTML content will be converted to Markdown.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "urlString" : {
            "description" : "The full URL to fetch content from (e.g., 'https://example.com/docs/page')."
          }
        },
        "required" : [ "urlString" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "addTextToWorkspace",
      "description" : "Add an arbitrary block of text (e.g., notes that are independent of the Plan, a configuration snippet, or something learned from another Agent) to the Workspace as a read-only fragment",
      "parameters" : {
        "description" : null,
        "properties" : {
          "content" : {
            "description" : "The text content to add to the Workspace"
          },
          "description" : {
            "description" : "A short, descriptive label for this text fragment (e.g., 'User Requirements', 'API Key Snippet')"
          }
        },
        "required" : [ "content", "description" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "dropWorkspaceFragments",
      "description" : "Remove specified fragments (files, text snippets, task history, analysis results) from the Workspace using their unique string IDs",
      "parameters" : {
        "description" : null,
        "properties" : {
          "fragmentIds" : {
            "description" : "List of string IDs corresponding to the fragments visible in the workspace that you want to remove. Must not be empty.",
            "items" : {
              "description" : null
            }
          }
        },
        "required" : [ "fragmentIds" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "callCodeAgent",
      "description" : "Invoke the Code Agent to solve or implement the current task. Provide complete instructions. Only the Workspace and your instructions are visible to the Code Agent, NOT the entire chat history; you must therefore provide appropriate context for your instructions.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "instructions" : {
            "description" : "Detailed instructions for the CodeAgent referencing the current project. Code Agent can figure out how to change the code at the syntax level but needs clear instructions of what exactly you want changed"
          }
        },
        "required" : [ "instructions" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "callSearchAgent",
      "description" : "Invoke the Search Agent to find information relevant to the given query. The Workspace is visible to the Search Agent. Searching is much slower than adding content to the Workspace directly if you know what you are looking for, but the Agent can find things that you don't know the exact name of. ",
      "parameters" : {
        "description" : null,
        "properties" : {
          "query" : {
            "description" : "The search query or question for the SearchAgent. Query in English (not just keywords)"
          }
        },
        "required" : [ "query" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "askHumanQuestion",
      "description" : "Escalate to a human for guidance. The model should call this when it is stuck or unsure how to proceed. The argument is a question to show the human.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "question" : {
            "description" : "The question you would like the human to answer. Make sure to provide any necessary background for the human to quickly and completely understand what you need and why. Use Markdown formatting where appropriate."
          }
        },
        "required" : [ "question" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "projectFinished",
      "description" : "Provide a final answer to the multi-step project. Use this when you're done or have everything you need.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "finalExplanation" : {
            "description" : "A final explanation or summary addressing all tasks. Format it in Markdown if desired."
          }
        },
        "required" : [ "finalExplanation" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    }, {
      "name" : "abortProject",
      "description" : "Abort the entire project. Use this if the tasks are impossible or out of scope.",
      "parameters" : {
        "description" : null,
        "properties" : {
          "reason" : {
            "description" : "Explain why the project must be aborted."
          }
        },
        "required" : [ "reason" ],
        "additionalProperties" : null,
        "definitions" : { }
      }
    } ],
    "toolChoice" : null,
    "responseFormat" : null,
    "maxCompletionTokens" : null,
    "logitBias" : { },
    "parallelToolCalls" : true,
    "seed" : null,
    "user" : null,
    "store" : null,
    "metadata" : {
      "tags" : "retain"
    },
    "serviceTier" : null,
    "reasoningEffort" : null
  }
}